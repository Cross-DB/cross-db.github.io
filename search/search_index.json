{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>CrossDBHigh Performance Embedded Database Development Framework\u2728</p> <p> Quick Learn\ud83e\udded Docs \ud83d\udcdc Download \ud83d\udcbe </p> \ud83c\udf0c RDBMS Model <p>Follows standard RDBMS model: DB, Table, Column, Row, Index, Cursor, Transaction, etc.</p> \u26fd Storage Mode <p>Supports On-Disk database, In-Memory database and optimized On-RamDisk database.</p> \ud83d\udd31 Transaction <p>Support the ACID (Atomic, Consistent, Isolated and Durable) principles.</p> \ud83d\ude8a C Struct ORM <p>Supports using C Struct to access DB directly. Almost all C data types are supported.</p> \ud83d\ude80 Native APIs <p>Well desgined high Performance Native APIs to define and manipulate DB.</p> \ud83d\udcae Auto-Upgrade <p>Change your struct, existing table will be upgraded automatically for you.</p> \u267b\ufe0f ISSU <p>Put all your program ISSU data into CrossDB, then you get In-Service Software Upgrade feature easily.</p> \ud83c\udf04 Out-of-the-Box <p>No complex configuration or provisioning, single header file and library. Very easy to learn and use.</p>"},{"location":"#crossdb-model","title":"CrossDB Model","text":""},{"location":"#lean-in-5m","title":"Learn CrossDB in 5 Minutes","text":"\ud83d\udef6 Schema\u2699\ufe0f Create DB\u269c\ufe0f Insert Rows\ud83d\ude80 Query Rows\ud83d\udd2b Update Rows\ud83c\udfa1 Cursor Query\u2702\ufe0f Delete Rows\ud83c\udf04 Transaction <pre><code>typedef struct {\nuint32_t            prefix;\nuint8_t             mask;\nuint32_t            nexthop;\nuint8_t             metric;\nchar                intf[16];\nuint32_t            birth;\nuint32_t            flags;\n} route_t;\n#undef  CROSS_STRUCT_NAME\n#define CROSS_STRUCT_NAME   route_t\ncross_field_t   route_schema[] = {\nCROSS_FIELD (prefix,    UINT,   IPv4, 0),\nCROSS_FIELD (mask,      UINT,   DFT,  0),\nCROSS_FIELD (nexthop,   UINT,   IPv4, 0),\nCROSS_FIELD (metric,    UINT,   DFT,  0),\nCROSS_FIELD (intf,      CHAR,   DFT,  0),\nCROSS_FIELD (birth,     UINT,   TS,   0),\nCROSS_FIELD (flags,     UINT,   HEX,  0),\nCROSS_END (route_t)\n};\n</code></pre> <pre><code>#define CHECK(ret,str)      if (ret &lt; 0) {  printf (str\": %s\\n\", cross_errMsg(ret)); return -1; }\ncross_db_h      hDb;\ncross_tbl_h     hRtTbl;\ncross_ret       ret;\nroute_t         route;  cross_rowid     count;\n// Create database\nret = cross_dbCreate (&amp;hDb, \"db_data/example\", 0);\nCHECK (ret, \"Failed to create db: example\");\n// Create table: route (Primary Key: prefix,mask)\nret = cross_dbTblCreate (hDb, &amp;hRtTbl, \"route\", route_schema, \"prefix,mask\", 0);\nCHECK (ret, \"Failed to create table: route table\");\n// Create index on nexthop: idx_nexthop\nret = cross_dbIdxCreate (hRtTbl, \"idx_nexthop\", \"nexthop\", 0);\nCHECK (ret, \"Failed to create index: idx_nexthop\");\n</code></pre> <pre><code>#define IP4ADDR(a,b,c,d)    ((a)&lt;&lt;24|(b)&lt;&lt;16|(c)&lt;&lt;8|(d))\n// Insert route 192.168.1.0/24-&gt;192.168.1.254\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   route.nexthop   = IP4ADDR(192,168,1,254);\nroute.metric    = 1;\nroute.flags     = 0;\nstrcpy (route.intf, \"eth1\");\nroute.birth     = time (NULL);\nret = cross_dbInsertRow (hRtTbl, &amp;route, 0); CHECK (ret, \"Failed to insert route 192.168.1.0/24\");\n</code></pre> <pre><code>#define IP4STR(ip)              ip&gt;&gt;24,(ip&gt;&gt;16)&amp;0xff,(ip&gt;&gt;8)&amp;0xff,ip&amp;0xff\n// Get single route 192.168.1.0/24 by Primary Key\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   ret = cross_dbGetRowByPK (hRtTbl, &amp;route, &amp;route, 0); CHECK (ret, \"Failed to get route 192.168.1.0/24 by Primary Key\");\nprintf (\"Get single route: %d.%d.%d.%d/%d-&gt;%d.%d.%d.%d intf: %s metric: %d flags: 0x%x\\n\",\nIP4STR(route.prefix), route.mask, IP4STR(route.nexthop), route.intf, route.metric, route.flags);\n// Get one row where nexthop=192.168.1.254\nroute.nexthop   = IP4ADDR(192,168,1,254);\nret = cross_dbGetOneRow (hRtTbl, \"nexthop\", &amp;route, &amp;route, 0);\nCHECK (ret, \"Failed to get one route where nexthop=192.168.1.254\");\nprintf (\"Get one route where nexthop=192.168.1.254: \"\n\"%d.%d.%d.%d/%d-&gt;%d.%d.%d.%d intf: %s metric: %d flags: 0x%x\\n\",\nIP4STR(route.prefix), route.mask, IP4STR(route.nexthop), route.intf, route.metric, route.flags);\n</code></pre> <pre><code>// Update single route 192.168.1.0/24 by Primary Key: set flags 0-&gt;1 metric 1-&gt;3\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   route.metric    = 3;\nroute.flags     = 1;\nret = cross_dbUpdRowByPK (hRtTbl, &amp;route, \"flags,metric\", &amp;route, 0); CHECK (ret, \"Failed to update route 192.168.1.0/24 by Primary Key\");\n// Update routes where nexthop=192.168.1.254: set flags 0-&gt;3\nroute.nexthop   = IP4ADDR(192,168,1,254);\nroute.flags     = 3;\ncount = cross_dbUpdateRows (hRtTbl, \"nexthop\", &amp;route, \"flags\", &amp;route, 0);\nprintf (\"Update %d routes where nexthop=10.1.2.254\\n\", count);\n</code></pre> <pre><code>// Use cursor to get routes where nexthop=192.168.1.254\ncross_cursor_h hCursor;\nroute.nexthop   = IP4ADDR(192,168,1,254);\ncount = cross_dbQueryRows (hRtTbl, &amp;hCursor, \"nexthop\", &amp;route, 0);\nprintf (\"Query %d routes where nexthop=192.168.1.254\\n\", count);\nwhile (CROSS_OK == cross_cursorGetNextRow (hCursor, &amp;route, 0)) {\nprintf (\"  route: %d.%d.%d.%d/%d-&gt;%d.%d.%d.%d intf: %s metric: %d flags: 0x%x\\n\",\nIP4STR(route.prefix), route.mask, IP4STR(route.nexthop), route.intf, route.metric, route.flags);\n}\ncross_cursorClose (hCursor, 0);\n</code></pre> <pre><code>// Delete single route 192.168.1.0/24 by Primary Key\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   ret = cross_dbDelRowByPK (hRtTbl, &amp;route, 0); CHECK (ret, \"Failed to delete route 192.168.1.0/24 by Primary Key\");\n// Delete routes where nexthop=192.168.1.254\nroute.nexthop   = IP4ADDR(192,168,1,254);\ncount = cross_dbDeleteRows (hRtTbl, \"nexthop\", &amp;route, 0);\nprintf (\"Delete %d routes where nexthop=192.168.1.254\\n\", count);\n</code></pre> <pre><code>ret = cross_dbTransBegin (hDb, 0);\nCHECK (ret, \"Failed to begin transaction\");\n// Update single route 192.168.1.0/24 by Primary Key: set flags 0-&gt;5\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   route.flags     = 5;\nret = cross_dbUpdRowByPK (hRtTbl, &amp;route, \"flags\", &amp;route, 0); CHECK (ret, \"Failed to update route 192.168.1.0/24 by Primary Key\");\nret = cross_dbTransCommit (hDb, 0);\nCHECK (ret, \"Failed to commit transaction\");\n</code></pre>"},{"location":"#want-to-lean-more","title":"Want to Lean More?","text":"<p> Get Started \ud83e\udded Tutorial \ud83d\udcdc </p>"},{"location":"about/about/","title":"About CrossDB","text":"<p>CrossDB was developed from 2019. It's designed to be a high-performance embedded database for application, OLTP or embedded system. </p> <p>To improve development efficiency, more and more features are designed and developed, and it's really an amazing tools for developers.</p> <p>Our mission is to deliver fantastic tools for embedded database application, high-frequency OLTP and embedded system development with a high-performance embedded database, database-driven development framework and distribution development solution.</p> <p>CrossDB is very easy to use, high efficiency, powerful and fast enough to help you refactor your project, reduce proudcut time to market and make your project successful.</p>"},{"location":"about/about/#contact-us","title":"Contact Us","text":"<p>support@crossdb.org</p>"},{"location":"about/community/","title":"Community","text":""},{"location":"about/community/#report-bugs","title":"Report Bugs","text":"<p>Github Issues</p>"},{"location":"about/community/#require-fetures","title":"Require Fetures","text":"<p>Github Fetures</p>"},{"location":"about/community/#discussion","title":"Discussion","text":"<p>Github Discussion</p>"},{"location":"about/faq/","title":"FAQ","text":""},{"location":"about/privacy/","title":"Privacy Notice","text":""},{"location":"about/privacy/#introduction","title":"Introduction","text":"<p>CrossDB Software has designed its website so that, in general, you can browse the CrossDB website without being asked for any personal information. Exceptions to this are when you specifically ask for information, request an evaluation copy of our software or download CrossDB trial software.</p> <p>This policy covers how CrossDB Software treats personal information that CrossDB may collect and receive via the CrossDB website. Your use of the CrossDB website constitutes acceptance of and agreement with the CrossDB Software Privacy Policy. CrossDB reserves the right to change the CrossDB Software Privacy Policy at any time without notice.</p>"},{"location":"about/privacy/#information-collection-and-use","title":"Information collection and use","text":"<p>CrossDB collects personal information when you request for information, request an evaluation of our software or when you download trial software. This information includes information about you such as name, business name and address, telephone and fax numbers, email address, operating system, and hardware environment. Providing information is voluntary. You may provide this information by filling out an on-line form, by email or other communication to CrossDB. However, you may not receive the product information, software evaluation or downloads if you choose not to provide the requested information.</p> <p>CrossDB Software's use of the information you provided will be to send you the information that you requested. CrossDB Software may also use the information to provide you with additional information about our products and services or market research. The information may be used to follow up with you regarding information supplied, software you downloaded or evaluated.</p> <p>CrossDB does not sell information collected from users of CrossDB website to other organizations. CrossDB may share the information collected with its subsidiaries and its affiliates such as partners and distributors.</p>"},{"location":"about/privacy/#general-information","title":"General Information","text":"<p>CrossDB web servers record standard information about CrossDB Web accesses such as IP addresses, your server name, browser type, etc. when you visit our website. CrossDB uses this for information about usage at CrossDB Software's website. The information submitted to CrossDB Software via the Web may be processed, stored and used outside the country where it was submitted.</p> <p>Links to third party websites are provided for your convenience. By using these links, you will no longer be on the CrossDB Software website and the CrossDB Software Privacy Policy will no longer apply.</p>"},{"location":"about/privacy/#contact-us","title":"Contact us","text":"<p>If you have any question about the information you provided to us or about the CrossDB Software Privacy Policy, please contact us at wang_junchuan@163.com</p>"},{"location":"about/refund/","title":"Refund Policy","text":"<p>Thank you for using CrossDB Embedded Database! We offer refund and/or exchange within the first 30 days of your purchase, if 30 days have passed since your purchase, you will not be offered a refund and/or exchange of any kind.</p>"},{"location":"about/terms/","title":"Terms of Service","text":"<p>CrossDB provides this Website for your information and use, subject to the terms set forth below. By accessing this Website, you agree to accept the following terms.</p>"},{"location":"about/terms/#general-terms","title":"General terms","text":"<p>In no event will CrossDB be liable for any damages including, without limitation, indirect, incidental, consequential, special or exemplary damages, that arise out of or relate to the use of or inability to use the CrossDB Website, even if CrossDB has been advised of the possibility of such damages.</p> <p>Any and all information provided on CrossDB\u2019s Website is provided \u201cas is,\u201d with no warranty as to accuracy or content.</p> <p>CrossDB does not adopt or endorse the views of any third party Websites linked to or from the CrossDB Website.</p> <p>CrossDB reserves the right to change, modify, add or remove any of these terms at any time.</p>"},{"location":"backup/","title":"Index","text":"<p>CrossDBHigh Performance Embedded Database Development Framework\u2728</p> <p> Start \ud83e\udded Docs \ud83d\udca1 Download \ud83d\udca1 </p> \ud83c\udf08 RDBMS <p>CDB follows standard RDBMS model DB, Tabel, Record, Index, Cursor, Transaction, SQL.</p> \ud83d\ude8a C ORM <p>CDB supports C Struct to access DB direclty. Almost all C data types are supported Enum, Union, Bitfield, Array, nested struct, etc.</p> \ud83d\ude80 Trigger <p>CDB Supports Foreign Key, Trigger and Cascade Trigger. They can be used to do Data-driven programming and unit test.</p> \u26fd PubSub <p>CDB supports PubSbub to subscribe DB from other source.</p> \ud83d\udcae RPC <p>CDB supports C struct serailization and a gRPC like RPC framework for C language in future.</p> \ud83d\udd31 Connector <p>CDB supports C/C++ and Python Connectors now, will support more connectors later.</p> \u267b\ufe0f Best Practice <p>Use CDB to Manage Data, do Data-Driven Programming, ISSU, distribut provisioning, etc.</p> \ud83c\udf04 Troubleshooting <p>CDB supports CLI, WEB, Staticstics, Status, Log, DB backup and restore to do troubleshooting.</p>"},{"location":"backup/#5-minutes-to-learn-crossdb","title":"5 Minutes to Learn CrossDB","text":"\ud83c\udf04 Define Schema\u267b\ufe0f Create Database Table and Index\ud83d\udcae Insert Rows\ud83c\udf04 Query Rows\ud83d\udcae Update Rows\ud83d\udcae Delete Rows <pre><code>typedef struct {\nuint32_t            prefix;\nuint8_t             mask;\nuint32_t            nexthop;\nuint8_t             metric;\nchar                intf[16];\nuint32_t            birth;\nuint32_t            flags;\n} route_t;\n#undef  CROSS_STRUCT_NAME\n#define CROSS_STRUCT_NAME   route_t\ncross_field_t   route_schema[] = {\nCROSS_FIELD (prefix,    UINT,   IPv4, 0),\nCROSS_FIELD (mask,      UINT,   DFT,  0),\nCROSS_FIELD (nexthop,   UINT,   IPv4, 0),\nCROSS_FIELD (metric,    UINT,   DFT,  0),\nCROSS_FIELD (type,      UINT,   DFT,  0),\nCROSS_FIELD (intf,      CHAR,   DFT,  0),\nCROSS_FIELD (birth,     UINT,   TS,   0),\nCROSS_FIELD (flags,     UINT,   HEX,  0),\nCROSS_END (route_t)\n};\n</code></pre> <pre><code>// Open ondisk database (create if not exist)\nprintf (\"Open databse: mydb\\n\");\nret = cross_dbOpen (&amp;hDb, \"mydb\", CROSS_CREATE|CROSS_ONDISK);\nCHECK (ret, \"Failed to open mydb\");\n// Open table (create if not exist), PrimaryKey is ipAddr,mask\nprintf (\"Open table: route\\n\");\nret = cross_tblOpen (hDb, &amp;hRtTbl, \"route\", route_schema, \"ipAddr,mask\", CROSS_CREATE);\nCHECK (ret, \"Failed to open route table\");\n// Create index on nexthop to accelarate lookup by nexthop\nprintf (\"Create index: idx_nexthpp[\\n\");\nret = cross_idxCreate (hRtTbl, \"idx_nexthop\", \"nexthop\", 0);\nCHECK (ret, \"Failed to create index idx_nexthop\");\n</code></pre> <pre><code>printf (\"Insert route 192.168.1.0/24-&gt;192.168.1.254\\n\");\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   route.nexthop   = IP4ADDR(10,1,2,254);\nroute.metric    = 1;\nroute.flags     = 0;\nstrcpy (route.intf, \"eth1\");\nroute.birth     = time (NULL);\nret = cross_dbInsertRow (hRtTbl, &amp;route, 0); CHECK (ret, \"Failed to insert row\");\nprintf (\"Insert route 10.1.1.0/24-&gt;10.1.2.254\\n\");\nroute.prefix    = IP4ADDR(100,1,0,0);\nroute.mask      = 24;   route.nexthop   = IP4ADDR(10,1,1,254);\nroute.metric    = 1;\nroute.flags     = 0;\nstrcpy (route.intf, \"eth2\");\nroute.birth     = time (NULL);\nret = cross_dbInsertRow (hRtTbl, &amp;route, 0); CHECK (ret, \"Failed to insert row\");\nprintf (\"Insert route 10.1.2.0/24-&gt;10.1.2.254\\n\");\nroute.prefix    = IP4ADDR(10,1,1,0);\nroute.mask      = 24;   route.nexthop   = IP4ADDR(10,1,2,254);\nroute.metric    = 2;\nroute.flags     = 0;\nstrcpy (route.intf, \"eth2\");\nroute.birth     = time (NULL);\nret = cross_dbInsertRow (hRtTbl, &amp;route, 0); CHECK (ret, \"Failed to insert row\");\n</code></pre> <pre><code>// Get all rows count\ncount = cross_dbGetRowsCount (hRtTbl, NULL, NULL, 0);\nprintf (\"Total %d routes\\n\", count);\n// Get rows count where nexthop=10.1.2.254\nroute.nexthop   = IP4ADDR(10,1,2,254);\ncount = cross_dbGetRowsCount (hRtTbl, \"nexthop\", &amp;route, 0);\nprintf (\"There're %d routes where nexthop=10.1.2.254\\n\", count);\n// Get single route 192.168.1.0/24 by PK\nmemset (&amp;route, 0, sizeof(route));\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   ret = cross_dbGetRowByPk (hRtTbl, &amp;route, &amp;route, 0); CHECK (ret, \"Failed to get row by PK\");\nprintf (\"Get single route: %d.%d.%d.%d/%d-&gt;%d.%d.%d.%d intf: %s metric: %d flags: 0x%x\\n\", IP4STR(route.prefix), route.mask, IP4STR(route.prefix), route.intf, route.metric, route.flags);\n// Use cursor to get routes where nexthop=10.1.2.254\ncross_cursor_h hCursor = NULL;\nroute.nexthop   = IP4ADDR(10,1,2,254);\ncount = cross_dbQueryRowsCursor (hRtTbl, &amp;hCursor, \"nexthop\", &amp;route, 0);\nCHECK (count, \"Failed to query rows\");\nprintf (\"Get %d routes where nexthop=10.1.2.254\\n\", count);\nwhile (CROSS_OK == cross_cursorGetNextRow (hCursor, &amp;route, 0)) {\nprintf (\"  route: %d.%d.%d.%d/%d-&gt;%d.%d.%d.%d intf: %s metric: %d flags: 0x%x\\n\", IP4STR(route.prefix), route.mask, IP4STR(route.prefix), route.intf, route.metric, route.flags);\n}\ncross_cursorFree (hCursor);\n</code></pre> <pre><code>printf (\"Update single route 192.168.1.0/24 by PK: set flags 0-&gt;0x10\\n\");\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   route.flags     = 0x10;\nret = cross_dbUpdRowByPk (hRtTbl, &amp;route, \"flags\", &amp;route, 0); CHECK (ret, \"Failed to update row by PK\");\n// Update routes where nexthop=10.1.2.254: set flags 0-&gt;0x20\nroute.nexthop   = IP4ADDR(10,1,2,254);\nroute.flags     = 0x20;\ncount = cross_dbUpdateRows (hRtTbl, \"nexthop\", &amp;route, \"flags\", &amp;route, 0);\nCHECK (count, \"Failed to update rows\");\nprintf (\"Update %d routes where nexthop=10.1.2.254\\n\", count);  </code></pre> <pre><code>printf (\"Delete single route 192.168.1.0/24 by PK\\n\");\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   ret = cross_dbDelRowByPk (hRtTbl, &amp;route, 0); CHECK (ret, \"Failed to delete row by PK\");\n// Delete routes where nexthop=10.1.2.254\nroute.nexthop   = IP4ADDR(10,1,2,254);\ncount = cross_dbDeleteRows (hRtTbl, \"nexthop\", &amp;route, 0);\nCHECK (count, \"Failed to update rows\");\nprintf (\"Update %d routes where nexthop=10.1.2.254\\n\", count);\n</code></pre>"},{"location":"backup/#sponsors","title":"Sponsors","text":"<p>Note</p> <p>Some text here</p> <p>Some text here</p> <p>Some text here</p> <p>Addtional Content</p> <p>Warning</p> <p>Some text here</p> <p>Some text here</p> <p>Some text here</p> <p>Addtional Content</p>"},{"location":"backup/features/","title":"Key Features","text":""},{"location":"backup/features/#high-performance","title":"High Performance","text":""},{"location":"backup/features/#acid-transactions","title":"ACID Transactions","text":"<p>CrossDB's transactions support the ACID (Atomic, Consistent, Isolated and Durable) principles, which safeguard data integrity by guaranteeing that updates will complete together, or the database will roll back to a pre-transaction state.</p>"},{"location":"backup/features/#core-ramdisk-database-system-design","title":"Core RamDisk Database System Design","text":"<p>CrossDB was designed to be an application runtime DB from the beginning. An Ra database system eliminates disk and file I/O, cache management and other sources of latency. By working with data directly in main memory, eXtremeDB avoids the overhead of making multiple data copies and transfers inherent in disk-based DBMSs. Databases can be created in shared memory, enabling concurrent access by multiple processes. Read about the performance advantages of IMDS technology in one of our white papers.</p>"},{"location":"backup/features/#in-memory-ramdisk-or-on-disk-storage","title":"In-Memory RamDisk or On-Disk Storage","text":"<p>CrossDB supports On-Disk Storage and In-Memory In addition to the core eXtremeDB in-memory database system, McObject\u2019s eXtremeDB offers hybrid storage: on a table-by-table basis, tables can be designated for in-memory or on-disk storage (with flexible caching). Choose the best storage medium based on performance, persistence, cost and form factor.</p>"},{"location":"backup/features/#multi-platform","title":"Multi-Platform","text":"<p>eXtremeDB is available for use on all major workstation and server platforms: x32- and x64-bit versions of Windows and Linux, Linux on POWER8, Solaris Sparc, Solaris x86_64, HP-UX (Itanium), and AIX.</p> <p>eXtremeDB is also available for all major embedded platforms: VxWorks, INTEGRITY, QNX, ThreadX, eCos, FreeRTOS and too many more to mention. Also x86, PowerPC, ARM, MIPS, etc.</p> <p>eXtremeDB source code is available. The minimum requirement to build eXtremeDB for any platform is a 32-bit CPU and a decent quality C compiler.</p>"},{"location":"backup/features/#b-tree-r-tree-patricia-trie-kd-tree-trigram-and-hash-indexes","title":"B-Tree, R-Tree, Patricia Trie, KD-Tree, Trigram and Hash Indexes","text":"<p>eXtremeDB provides a wide range of database indexes, to boost application performance and minimize footprint. eXtremeDB offers R-trees for geospatial data, Patricia tries for IP/telecom, KD-trees for multi-dimensional data and Query-by-Example (QBE), B-trees, Trigram index for fuzzy search, hash indexes and more. For in-memory databases, rather than storing duplicate data, indexes contain only a reference to data, keeping memory requirements to an absolute minimum.</p>"},{"location":"backup/features/#wide-range-of-supported-data-types","title":"Wide Range of Supported Data Types","text":"<p>eXtremeDB supports a wide range of data types \u2014 including structures, arrays, boolean, binary, decimal, vectors and BLOBs \u2014 for maximum coding efficiency. Data can be stored in the same complex form in which it is used in the application, or as normalized relations.  Learn more in our online documentation.</p>"},{"location":"backup/features/#single-header-and-libray","title":"\ud83c\udf08 Single header and libray","text":"<p>CDB follows standard RDBMS model DB, Tabel, Record, Index, Cursor, Transaction, SQL.</p>"},{"location":"backup/features/#c-orm","title":"\ud83d\ude8a C ORM","text":"<p>CDB supports C Struct to access DB direclty. Almost all C data types are supported Enum, Union, Bitfield, Array, nested struct, etc.</p>"},{"location":"backup/features/#trigger","title":"\ud83d\ude80 Trigger","text":"<p>CDB Supports Foreign Key, Trigger and Cascade Trigger. They can be used to do Data-driven programming and unit test.</p>"},{"location":"backup/features/#pubsub","title":"\u26fd PubSub","text":"<p>CDB supports PubSbub to subscribe DB from other source.</p>"},{"location":"backup/features/#rpc","title":"\ud83d\udcae RPC","text":"<p>CDB supports C struct serailization and a gRPC like RPC framework for C language in future.</p>"},{"location":"backup/features/#connector","title":"\ud83d\udd31 Connector","text":"<p>CDB supports C/C++ and Python Connectors now, will support more connectors later.</p>"},{"location":"backup/features/#best-practice","title":"\u267b\ufe0f Best Practice","text":"<p>Use CDB to Manage Data, do Data-Driven Programming, ISSU, distribut provisioning, etc.</p>"},{"location":"backup/features/#troubleshooting","title":"\ud83c\udf04 Troubleshooting","text":"<p>CDB supports CLI, WEB, Staticstics, Status, Log, DB backup and restore to do troubleshooting.</p>"},{"location":"backup/introduction/","title":"Introduction","text":"<p>CrossDB(CDB) is a powerful high-performance distrubuted embedded SQL RDBMS database. It's developed to  improve development efficiency for embedded programmers. </p> <ul> <li>You can use CDB RDBMS to Manage Program Data efficiently.</li> <li>You can use CDB transaction to do persistency storage on Disk/Flash with ACID feature.</li> <li>YOu can use CDB to support Process Restartability, In-Service Software Upgrade(ISSU) easily.</li> <li>You can use CDB RDBMS to refactor your code conveniently.</li> <li>You can use CDB Index to optimize performance without changing your code.</li> <li>You can use CDB Trigger to implement Data-Driven programming paradigm.</li> <li>You can use CDB PUBSUB to subscribe DB from other process's DB either on same host or remote host.</li> <li>You can use CDB to implement Centralize-DB programming paradigm.</li> <li>You can use CDB eventloop to implement event-driven programming paradigm.</li> <li>You can use CDB RPC to build distributed service.</li> <li>You can use CDB CLI tool to debug running program's data in off-line way.</li> <li>You can use CDB SQL to view/create/update/delete/filter program data.</li> <li>You can use CDB Browser to view program data.</li> <li>You can use CDB to do DB backup restore it.</li> <li>You can use CDB DB Change Log to view DB change history with filter, backtrace, rate-limit, expiring, etc.</li> <li>You can use Python connector to write unit test with SQL to test program.</li> <li>You can copy the DB folders from device and open on PC/Server with cdb-cli or Python directly.</li> <li>Use CDB DB-Driven Mode to Build Program Logic (Table Trigger, FK, auto delete, Cascade Trigger)</li> <li>Use CDB Python Connector to do DB-Driven Unit Test</li> <li>Use CDB Pub/Sub to Build Distributed System (Eventloop/Timer/WorkQueue, vs IPC, OOP [priv data])</li> <li>Use CDB Pub/Sub to Build Centralized DB-Driven System (3rd lang, DM no checkpoint)</li> <li>CDB Serialization and RPC</li> <li>CDB SQL Connectors (RESP3, Python)</li> <li>CDB SQL Drivers (C, Python)</li> </ul>"},{"location":"backup/introduction/#architecture","title":"Architecture","text":"<p>png relative </p>"},{"location":"backup/introduction/#feature-list","title":"Feature List","text":"<p>TDB</p>"},{"location":"backup/introduction/#support-os","title":"Support OS","text":"<ul> <li>Linux</li> <li>Windows</li> </ul>"},{"location":"backup/introduction/#support-platform","title":"Support Platform","text":"<p>Following platform are tested</p> <ul> <li>x86</li> <li>PowerPC</li> <li>ARM</li> </ul>"},{"location":"backup/introduction/#porting","title":"Porting","text":"<p>Log</p> <p>Heart beat</p>"},{"location":"backup/introduction/#compiling","title":"Compiling","text":""},{"location":"backup/introduction/#linux","title":"Linux","text":"<p>Build library</p> <p>Build example</p>"},{"location":"backup/introduction/#windows","title":"Windows","text":"<p>You can build with MinGW or MSYS2 or Cygwin</p> <p>Build library MinGW MSYS2 Cygwin</p> <p>Build example</p>"},{"location":"backup/usecases/","title":"Products","text":"<p>CrossDB(CDB) is a powerful high-performance distrubuted embedded SQL RDBMS database. It's developed to  improve development efficiency for embedded programmers. </p> <p>CrossDB combines on-disk and in-memory data storage in a single embedded database system, so developers can optimize applications for speed and persistence, giving you flexibility to prioritize between performance, cost, power, and space-conserving storage options. Offering native and SQL APIs for C, C++, and Python.</p>"},{"location":"backup/usecases/#feature-list","title":"Feature List","text":"<ul> <li>You can use CDB RDBMS to Manage Program Data efficiently.</li> <li>You can use CDB transaction to do persistency storage on Disk/Flash with ACID feature.</li> <li>YOu can use CDB to support Process Restartability, In-Service Software Upgrade(ISSU) easily.</li> <li>You can use CDB RDBMS to refactor your code conveniently.</li> <li>You can use CDB Index to optimize performance without changing your code.</li> <li>You can use CDB Trigger to implement Data-Driven programming paradigm.</li> <li>You can use CDB PUBSUB to subscribe DB from other process's DB either on same host or remote host.</li> <li>You can use CDB to implement Centralize-DB programming paradigm.</li> <li>You can use CDB eventloop to implement event-driven programming paradigm.</li> <li>You can use CDB RPC to build distributed service.</li> <li>You can use CDB CLI tool to debug running program's data in off-line way.</li> <li>You can use CDB SQL to view/create/update/delete/filter program data.</li> <li>You can use CDB Browser to view program data.</li> <li>You can use CDB to do DB backup restore it.</li> <li>You can use CDB DB Change Log to view DB change history with filter, backtrace, rate-limit, expiring, etc.</li> <li>You can use Python connector to write unit test with SQL to test program.</li> <li>You can copy the DB folders from device and open on PC/Server with cdb-cli or Python directly.</li> <li>Use CDB DB-Driven Mode to Build Program Logic (Table Trigger, FK, auto delete, Cascade Trigger)</li> <li>Use CDB Python Connector to do DB-Driven Unit Test</li> <li>Use CDB Pub/Sub to Build Distributed System (Eventloop/Timer/WorkQueue, vs IPC, OOP [priv data])</li> <li>Use CDB Pub/Sub to Build Centralized DB-Driven System (3rd lang, DM no checkpoint)</li> <li>CDB Serialization and RPC</li> <li>CDB SQL Connectors (RESP3, Python)</li> <li>CDB SQL Drivers (C, Python)</li> </ul>"},{"location":"backup/blog/avx512-in-golang/","title":"How to Use AVX512 in Golang via C Compiler","text":"<p>AVX512 is the latest generation of SIMD instructions released by Intel, which can process 512 bits of data in one instruction cycle, equivalent to 16 single-precision floating point numbers or 8 double-precision floating point numbers. The training and inference process of recommendation models in Gorse requires a lot of vector computation, and AVX512 can theoretically bring some acceleration effect. Unfortunately, the Go compiler does not automatically generate SIMD instructions.</p> <p>MinIO had open-sourced a tool to convert Intel assembly to Go assembly c2goasm. First, the vectorized functions are implemented in C, and the assembly containing the SIMD instructions is compiled by Clang. Then, since Go assembly supports AVX512, the functions implemented by SIMD can be called through Go assembly. The c2goasm solution is very effective, however, the project has not been updated for almost 4 years, and after testing it cannot handle AVX512 instructions.</p> <p>To use AVX512 in Go, we have developed a toolkit for compiling C into Go assembly functions goat and implemented a library of vectorized functions with the help of goat github.com/gorse-io/gorse/base/floats. Inheriting the idea of c2goasm, <code>goat</code> implements further enhancements.</p> <ol> <li>Starting directly from the C source code to get Go assembly functions, the user does not have to compile the C source code itself.</li> <li>It will also generate Go function definitions based on C function definitions, so users do not need to write Go function definitions by hand.</li> </ol> <p>The post will detail the technical implementation of goat ideas, welcome to read the code github.com/gorse-io/gorse/cmd/goat.</p> <pre><code>flowchart LR\n  c[C source]--&gt;intel[Intel assembly]\n  intel--&gt;goasm[Go assembly]\n  c--&gt;go[Go function definition]</code></pre>"},{"location":"backup/blog/avx512-in-golang/#compile-assembly-from-c","title":"Compile Assembly from C","text":"<p>The C implementation of the function <code>_mm512_mul_to</code> multiplies two floating point arrays and then saves the result in a third array. In general, the compiler automatically generates assembly that uses SIMD. Here, intrinsic is used to ensure that SIMD instructions are generated.</p> <pre><code>#include &lt;immintrin.h&gt;\nvoid _mm512_mul_to(float *a, float *b, float *c, int64_t n)\n{\nint epoch = n / 16;\nint remain = n % 16;\nfor (int i = 0; i &lt; epoch; i++)\n{\n__m512 v1 = _mm512_loadu_ps(a);\n__m512 v2 = _mm512_loadu_ps(b);\n__m512 v = _mm512_mul_ps(v1, v2);\n_mm512_storeu_ps(c, v);\na += 16;\nb += 16;\nc += 16;\n}\nif (remain &gt;= 8)\n{\n__m256 v1 = _mm256_loadu_ps(a);\n__m256 v2 = _mm256_loadu_ps(b);\n__m256 v = _mm256_mul_ps(v1, v2);\n_mm256_storeu_ps(c, v);\na += 8;\nb += 8;\nc += 8;\nremain -= 8;\n}\nfor (int i = 0; i &lt; remain; i++)\n{\nc[i] = a[i] * b[i];\n}\n}\n</code></pre> <p>Save the code to <code>mm512_mul_to.c</code> and use the following command to compile the C code to assembly as well as binary.</p> <pre><code># Generate assembly\nclang -S -c mm512_mul_to.c -o mm512_mul_to.s \\\n-O3 -mavx -mfma -mavx512f -mavx512dq \\\n-mno-red-zone -mstackrealign -mllvm -inline-threshold=1000 \\\n-fno-asynchronous-unwind-tables -fno-exceptions -fno-rtti\n\n# Generate binary\nclang -c mm512_mul_to.c -o mm512_mul_to.o \\\n-O3 -mavx -mfma -mavx512f -mavx512dq \\\n-mno-red-zone -mstackrealign -mllvm -inline-threshold=1000 \\\n-fno-asynchronous-unwind-tables -fno-exceptions -fno-rtti\n</code></pre> <p>::: details mm512_mul_to.s</p> <pre><code> .globl _mm512_mul_to                   # -- Begin function _mm512_mul_to\n.p2align 4, 0x90\n.type _mm512_mul_to,@function\n_mm512_mul_to:                          # @_mm512_mul_to\n# %bb.0:\npushq %rbp\nmovq %rsp, %rbp\nandq $-8, %rsp\nleaq 15(%rcx), %r9\ntestq %rcx, %rcx\ncmovnsq %rcx, %r9\nshrq $4, %r9\nmovl %r9d, %eax\nshll $4, %eax\nsubl %eax, %ecx\ntestl %r9d, %r9d\njle .LBB3_6\n# %bb.1:\nleal -1(%r9), %eax\nmovl %r9d, %r8d\nandl $3, %r8d\ncmpl $3, %eax\njb .LBB3_4\n# %bb.2:\nandl $-4, %r9d\nnegl %r9d\n.p2align 4, 0x90\n.LBB3_3:                                # =&gt;This Inner Loop Header: Depth=1\nvmovups (%rdi), %zmm0\nvmulps (%rsi), %zmm0, %zmm0\nvmovups %zmm0, (%rdx)\nvmovups 64(%rdi), %zmm0\nvmulps 64(%rsi), %zmm0, %zmm0\nvmovups %zmm0, 64(%rdx)\nvmovups 128(%rdi), %zmm0\nvmulps 128(%rsi), %zmm0, %zmm0\nvmovups %zmm0, 128(%rdx)\nvmovups 192(%rdi), %zmm0\nvmulps 192(%rsi), %zmm0, %zmm0\nvmovups %zmm0, 192(%rdx)\naddq $256, %rdi                      # imm = 0x100\naddq $256, %rsi                      # imm = 0x100\naddq $256, %rdx                      # imm = 0x100\naddl $4, %r9d\njne .LBB3_3\n.LBB3_4:\ntestl %r8d, %r8d\nje .LBB3_6\n.p2align 4, 0x90\n.LBB3_5:                                # =&gt;This Inner Loop Header: Depth=1\nvmovups (%rdi), %zmm0\nvmulps (%rsi), %zmm0, %zmm0\nvmovups %zmm0, (%rdx)\naddq $64, %rdi\naddq $64, %rsi\naddq $64, %rdx\naddl $-1, %r8d\njne .LBB3_5\n.LBB3_6:\ncmpl $7, %ecx\njle .LBB3_8\n# %bb.7:\nvmovups (%rdi), %ymm0\nvmulps (%rsi), %ymm0, %ymm0\nvmovups %ymm0, (%rdx)\naddq $32, %rdi\naddq $32, %rsi\naddq $32, %rdx\naddl $-8, %ecx\n.LBB3_8:\ntestl %ecx, %ecx\njle .LBB3_14\n# %bb.9:\nmovl %ecx, %ecx\nleaq -1(%rcx), %rax\nmovl %ecx, %r8d\nandl $3, %r8d\ncmpq $3, %rax\njae .LBB3_15\n# %bb.10:\nxorl %eax, %eax\njmp .LBB3_11\n.LBB3_15:\nandl $-4, %ecx\nxorl %eax, %eax\n.p2align 4, 0x90\n.LBB3_16:                               # =&gt;This Inner Loop Header: Depth=1\nvmovss (%rdi,%rax,4), %xmm0            # xmm0 = mem[0],zero,zero,zero\nvmulss (%rsi,%rax,4), %xmm0, %xmm0\nvmovss %xmm0, (%rdx,%rax,4)\nvmovss 4(%rdi,%rax,4), %xmm0           # xmm0 = mem[0],zero,zero,zero\nvmulss 4(%rsi,%rax,4), %xmm0, %xmm0\nvmovss %xmm0, 4(%rdx,%rax,4)\nvmovss 8(%rdi,%rax,4), %xmm0           # xmm0 = mem[0],zero,zero,zero\nvmulss 8(%rsi,%rax,4), %xmm0, %xmm0\nvmovss %xmm0, 8(%rdx,%rax,4)\nvmovss 12(%rdi,%rax,4), %xmm0          # xmm0 = mem[0],zero,zero,zero\nvmulss 12(%rsi,%rax,4), %xmm0, %xmm0\nvmovss %xmm0, 12(%rdx,%rax,4)\naddq $4, %rax\ncmpq %rax, %rcx\njne .LBB3_16\n.LBB3_11:\ntestq %r8, %r8\nje .LBB3_14\n# %bb.12:\nleaq (%rdx,%rax,4), %rcx\nleaq (%rsi,%rax,4), %rdx\nleaq (%rdi,%rax,4), %rax\nxorl %esi, %esi\n.p2align 4, 0x90\n.LBB3_13:                               # =&gt;This Inner Loop Header: Depth=1\nvmovss (%rax,%rsi,4), %xmm0            # xmm0 = mem[0],zero,zero,zero\nvmulss (%rdx,%rsi,4), %xmm0, %xmm0\nvmovss %xmm0, (%rcx,%rsi,4)\naddq $1, %rsi\ncmpq %rsi, %r8\njne .LBB3_13\n.LBB3_14:\nmovq %rbp, %rsp\npopq %rbp\nvzeroupper\nretq\n.Lfunc_end3:\n.size _mm512_mul_to, .Lfunc_end3-_mm512_mul_to\n# -- End function\n</code></pre> <p>:::</p> <p>In Go, it is easy to execute the compile command with <code>exec.Command</code>.</p>"},{"location":"backup/blog/avx512-in-golang/#construct-go-code-from-assembly","title":"Construct Go Code from Assembly","text":""},{"location":"backup/blog/avx512-in-golang/#convert-assembly","title":"Convert Assembly","text":"<p><code>mm512_mul_to.o</code> is the binary of the function after it has been compiled. By using <code>objdump</code> you can see that each assembly has been converted to machine code.</p> <pre><code>objdump -d mm512_mul_to.o --insn-width 16\n</code></pre> <p>::: details objdump output</p> <pre><code>0000000000000460 &lt;_mm512_mul_to&gt;:\n 460:   55                              push   %rbp\n 461:   48 89 e5                        mov    %rsp,%rbp\n 464:   48 83 e4 f8                     and    $0xfffffffffffffff8,%rsp\n 468:   4c 8d 49 0f                     lea    0xf(%rcx),%r9\n 46c:   48 85 c9                        test   %rcx,%rcx\n 46f:   4c 0f 49 c9                     cmovns %rcx,%r9\n 473:   49 c1 e9 04                     shr    $0x4,%r9\n 477:   44 89 c8                        mov    %r9d,%eax\n 47a:   c1 e0 04                        shl    $0x4,%eax\n 47d:   29 c1                           sub    %eax,%ecx\n 47f:   45 85 c9                        test   %r9d,%r9d\n 482:   0f 8e bc 00 00 00               jle    544 &lt;_mm512_mul_to+0xe4&gt;\n 488:   41 8d 41 ff                     lea    -0x1(%r9),%eax\n 48c:   45 89 c8                        mov    %r9d,%r8d\n 48f:   41 83 e0 03                     and    $0x3,%r8d\n 493:   83 f8 03                        cmp    $0x3,%eax\n 496:   72 74                           jb     50c &lt;_mm512_mul_to+0xac&gt;\n 498:   41 83 e1 fc                     and    $0xfffffffc,%r9d\n 49c:   41 f7 d9                        neg    %r9d\n 49f:   90                              nop\n 4a0:   62 f1 7c 48 10 07               vmovups (%rdi),%zmm0\n 4a6:   62 f1 7c 48 59 06               vmulps (%rsi),%zmm0,%zmm0\n 4ac:   62 f1 7c 48 11 02               vmovups %zmm0,(%rdx)\n 4b2:   62 f1 7c 48 10 47 01            vmovups 0x40(%rdi),%zmm0\n 4b9:   62 f1 7c 48 59 46 01            vmulps 0x40(%rsi),%zmm0,%zmm0\n 4c0:   62 f1 7c 48 11 42 01            vmovups %zmm0,0x40(%rdx)\n 4c7:   62 f1 7c 48 10 47 02            vmovups 0x80(%rdi),%zmm0\n 4ce:   62 f1 7c 48 59 46 02            vmulps 0x80(%rsi),%zmm0,%zmm0\n 4d5:   62 f1 7c 48 11 42 02            vmovups %zmm0,0x80(%rdx)\n 4dc:   62 f1 7c 48 10 47 03            vmovups 0xc0(%rdi),%zmm0\n 4e3:   62 f1 7c 48 59 46 03            vmulps 0xc0(%rsi),%zmm0,%zmm0\n 4ea:   62 f1 7c 48 11 42 03            vmovups %zmm0,0xc0(%rdx)\n 4f1:   48 81 c7 00 01 00 00            add    $0x100,%rdi\n 4f8:   48 81 c6 00 01 00 00            add    $0x100,%rsi\n 4ff:   48 81 c2 00 01 00 00            add    $0x100,%rdx\n 506:   41 83 c1 04                     add    $0x4,%r9d\n 50a:   75 94                           jne    4a0 &lt;_mm512_mul_to+0x40&gt;\n 50c:   45 85 c0                        test   %r8d,%r8d\n 50f:   74 33                           je     544 &lt;_mm512_mul_to+0xe4&gt;\n 511:   66 2e 0f 1f 84 00 00 00 00 00   nopw   %cs:0x0(%rax,%rax,1)\n 51b:   0f 1f 44 00 00                  nopl   0x0(%rax,%rax,1)\n 520:   62 f1 7c 48 10 07               vmovups (%rdi),%zmm0\n 526:   62 f1 7c 48 59 06               vmulps (%rsi),%zmm0,%zmm0\n 52c:   62 f1 7c 48 11 02               vmovups %zmm0,(%rdx)\n 532:   48 83 c7 40                     add    $0x40,%rdi\n 536:   48 83 c6 40                     add    $0x40,%rsi\n 53a:   48 83 c2 40                     add    $0x40,%rdx\n 53e:   41 83 c0 ff                     add    $0xffffffff,%r8d\n 542:   75 dc                           jne    520 &lt;_mm512_mul_to+0xc0&gt;\n 544:   83 f9 07                        cmp    $0x7,%ecx\n 547:   7e 1b                           jle    564 &lt;_mm512_mul_to+0x104&gt;\n 549:   c5 fc 10 07                     vmovups (%rdi),%ymm0\n 54d:   c5 fc 59 06                     vmulps (%rsi),%ymm0,%ymm0\n 551:   c5 fc 11 02                     vmovups %ymm0,(%rdx)\n 555:   48 83 c7 20                     add    $0x20,%rdi\n 559:   48 83 c6 20                     add    $0x20,%rsi\n 55d:   48 83 c2 20                     add    $0x20,%rdx\n 561:   83 c1 f8                        add    $0xfffffff8,%ecx\n 564:   85 c9                           test   %ecx,%ecx\n 566:   0f 8e ac 00 00 00               jle    618 &lt;_mm512_mul_to+0x1b8&gt;\n 56c:   89 c9                           mov    %ecx,%ecx\n 56e:   48 8d 41 ff                     lea    -0x1(%rcx),%rax\n 572:   41 89 c8                        mov    %ecx,%r8d\n 575:   41 83 e0 03                     and    $0x3,%r8d\n 579:   48 83 f8 03                     cmp    $0x3,%rax\n 57d:   73 04                           jae    583 &lt;_mm512_mul_to+0x123&gt;\n 57f:   31 c0                           xor    %eax,%eax\n 581:   eb 5b                           jmp    5de &lt;_mm512_mul_to+0x17e&gt;\n 583:   83 e1 fc                        and    $0xfffffffc,%ecx\n 586:   31 c0                           xor    %eax,%eax\n 588:   0f 1f 84 00 00 00 00 00         nopl   0x0(%rax,%rax,1)\n 590:   c5 fa 10 04 87                  vmovss (%rdi,%rax,4),%xmm0\n 595:   c5 fa 59 04 86                  vmulss (%rsi,%rax,4),%xmm0,%xmm0\n 59a:   c5 fa 11 04 82                  vmovss %xmm0,(%rdx,%rax,4)\n 59f:   c5 fa 10 44 87 04               vmovss 0x4(%rdi,%rax,4),%xmm0\n 5a5:   c5 fa 59 44 86 04               vmulss 0x4(%rsi,%rax,4),%xmm0,%xmm0\n 5ab:   c5 fa 11 44 82 04               vmovss %xmm0,0x4(%rdx,%rax,4)\n 5b1:   c5 fa 10 44 87 08               vmovss 0x8(%rdi,%rax,4),%xmm0\n 5b7:   c5 fa 59 44 86 08               vmulss 0x8(%rsi,%rax,4),%xmm0,%xmm0\n 5bd:   c5 fa 11 44 82 08               vmovss %xmm0,0x8(%rdx,%rax,4)\n 5c3:   c5 fa 10 44 87 0c               vmovss 0xc(%rdi,%rax,4),%xmm0\n 5c9:   c5 fa 59 44 86 0c               vmulss 0xc(%rsi,%rax,4),%xmm0,%xmm0\n 5cf:   c5 fa 11 44 82 0c               vmovss %xmm0,0xc(%rdx,%rax,4)\n 5d5:   48 83 c0 04                     add    $0x4,%rax\n 5d9:   48 39 c1                        cmp    %rax,%rcx\n 5dc:   75 b2                           jne    590 &lt;_mm512_mul_to+0x130&gt;\n 5de:   4d 85 c0                        test   %r8,%r8\n 5e1:   74 35                           je     618 &lt;_mm512_mul_to+0x1b8&gt;\n 5e3:   48 8d 0c 82                     lea    (%rdx,%rax,4),%rcx\n 5e7:   48 8d 14 86                     lea    (%rsi,%rax,4),%rdx\n 5eb:   48 8d 04 87                     lea    (%rdi,%rax,4),%rax\n 5ef:   31 f6                           xor    %esi,%esi\n 5f1:   66 2e 0f 1f 84 00 00 00 00 00   nopw   %cs:0x0(%rax,%rax,1)\n 5fb:   0f 1f 44 00 00                  nopl   0x0(%rax,%rax,1)\n 600:   c5 fa 10 04 b0                  vmovss (%rax,%rsi,4),%xmm0\n 605:   c5 fa 59 04 b2                  vmulss (%rdx,%rsi,4),%xmm0,%xmm0\n 60a:   c5 fa 11 04 b1                  vmovss %xmm0,(%rcx,%rsi,4)\n 60f:   48 83 c6 01                     add    $0x1,%rsi\n 613:   49 39 f0                        cmp    %rsi,%r8\n 616:   75 e8                           jne    600 &lt;_mm512_mul_to+0x1a0&gt;\n 618:   48 89 ec                        mov    %rbp,%rsp\n 61b:   5d                              pop    %rbp\n 61c:   c5 f8 77                        vzeroupper \n 61f:   c3                              retq   \n</code></pre> <p>:::</p>"},{"location":"backup/blog/avx512-in-golang/#encoding-machine-code","title":"Encoding Machine Code","text":"<p>Go assembly provides three instructions for representing binary machine code.</p> <ul> <li><code>BYTE</code> encodes one byte of binary data</li> <li><code>WORD</code> encodes two bytes of binary data</li> <li><code>LONG</code> encodes four bytes of binary data</li> </ul> <p>If the instruction machine code length is exactly a multiple of two, for example</p> <pre><code> 498: 41 83 e1 fc and $0xfffffffc,%r9d\n</code></pre> <p>can be converted to</p> <pre><code> LONG $0xfce18341\n</code></pre> <p>But if the length is not a multiple of two, for example</p> <pre><code> 4b2: 62 f1 7c 48 10 47 01 vmovups 0x40(%rdi),%zmm0\n</code></pre> <p>It requires a combination of three instructions to represent</p> <pre><code> LONG $0x487cf162; WORD $0x4710; BYTE $0x01 // vmovups  64(%rdi), %zmm0\n</code></pre> <p>Note that the byte order of the instruction encoding and the byte order of the <code>objdump</code> output are reversed.</p>"},{"location":"backup/blog/avx512-in-golang/#function-definition-and-parameters","title":"Function Definition and Parameters","text":"<p>In C assembly, if the function has no more than 6 arguments, the arguments are stored in registers and passed to the function in the following order of placement: <code>%rdi</code>, <code>%rsi</code>, <code>%rdx</code>, <code>%rcx</code>, <code>%r8</code> and <code>%r9</code>. However, in Go assembly, function arguments are placed in memory starting from the address held in the <code>FP</code> register, which requires us to move the arguments in memory to the register.</p> <p>The <code>_mm512_mul_to</code> function has four arguments, so it is necessary to move the four arguments before the function starts.</p> <pre><code>TEXT -_mm512_mul_to(SB), $0-32\nMOVQ a+0(FP), DI\nMOVQ b+8(FP), SI\nMOVQ c+16(FP), DX\nMOVQ n+24(FP), CX\n</code></pre> <p>The function definition consists of three parts: the <code>TEXT</code> keyword, the name starting with <code>-</code> and ending with <code>(SB)</code>, and finally the parameter memory size of 32 bytes. The information about the number of arguments is not available in assembly and needs to be obtained from the C function definition (refer to Generating go function definitions).</p>"},{"location":"backup/blog/avx512-in-golang/#redirect-jump-instruction","title":"Redirect Jump Instruction","text":"<p>x86 jump instructions jump to absolute addresses and direct encoding of jump instructions does not work. Therefore, jump instructions need to be converted to jump instructions in Go assembly.</p> <ul> <li>Converting tags: Go assembly tags cannot start with <code>.</code>, so you need to remove the <code>.</code>.</li> <li>Conversion commands: Go assembly jump commands are in uppercase.</li> </ul> <p>After the above three steps, the final Go assembly code is obtained</p> <p>::: details Go assembly</p> <pre><code>TEXT -_mm512_mul_to(SB), $0-32\nMOVQ a+0(FP), DI\nMOVQ b+8(FP), SI\nMOVQ c+16(FP), DX\nMOVQ n+24(FP), CX\nBYTE $0x55 // pushq %rbp\nWORD $0x8948; BYTE $0xe5 // movq %rsp, %rbp\nLONG $0xf8e48348 // andq $-8, %rsp\nLONG $0x0f498d4c // leaq 15(%rcx), %r9\nWORD $0x8548; BYTE $0xc9 // testq %rcx, %rcx\nLONG $0xc9490f4c // cmovnsq %rcx, %r9\nLONG $0x04e9c149 // shrq $4, %r9\nWORD $0x8944; BYTE $0xc8 // movl %r9d, %eax\nWORD $0xe0c1; BYTE $0x04 // shll $4, %eax\nWORD $0xc129 // subl %eax, %ecx\nWORD $0x8545; BYTE $0xc9 // testl %r9d, %r9d\nJLE LBB3_6\nLONG $0xff418d41 // leal -1(%r9), %eax\nWORD $0x8945; BYTE $0xc8 // movl %r9d, %r8d\nLONG $0x03e08341 // andl $3, %r8d\nWORD $0xf883; BYTE $0x03 // cmpl $3, %eax\nJB LBB3_4\nLONG $0xfce18341 // andl $-4, %r9d\nWORD $0xf741; BYTE $0xd9 // negl %r9d\nLBB3_3:\nLONG $0x487cf162; WORD $0x0710 // vmovups (%rdi), %zmm0\nLONG $0x487cf162; WORD $0x0659 // vmulps (%rsi), %zmm0, %zmm0\nLONG $0x487cf162; WORD $0x0211 // vmovups %zmm0, (%rdx)\nLONG $0x487cf162; WORD $0x4710; BYTE $0x01 // vmovups 64(%rdi), %zmm0\nLONG $0x487cf162; WORD $0x4659; BYTE $0x01 // vmulps 64(%rsi), %zmm0, %zmm0\nLONG $0x487cf162; WORD $0x4211; BYTE $0x01 // vmovups %zmm0, 64(%rdx)\nLONG $0x487cf162; WORD $0x4710; BYTE $0x02 // vmovups 128(%rdi), %zmm0\nLONG $0x487cf162; WORD $0x4659; BYTE $0x02 // vmulps 128(%rsi), %zmm0, %zmm0\nLONG $0x487cf162; WORD $0x4211; BYTE $0x02 // vmovups %zmm0, 128(%rdx)\nLONG $0x487cf162; WORD $0x4710; BYTE $0x03 // vmovups 192(%rdi), %zmm0\nLONG $0x487cf162; WORD $0x4659; BYTE $0x03 // vmulps 192(%rsi), %zmm0, %zmm0\nLONG $0x487cf162; WORD $0x4211; BYTE $0x03 // vmovups %zmm0, 192(%rdx)\nLONG $0x00c78148; WORD $0x0001; BYTE $0x00 // addq $256, %rdi\nLONG $0x00c68148; WORD $0x0001; BYTE $0x00 // addq $256, %rsi\nLONG $0x00c28148; WORD $0x0001; BYTE $0x00 // addq $256, %rdx\nLONG $0x04c18341 // addl $4, %r9d\nJNE LBB3_3\nLBB3_4:\nWORD $0x8545; BYTE $0xc0 // testl %r8d, %r8d\nJE LBB3_6\nLBB3_5:\nLONG $0x487cf162; WORD $0x0710 // vmovups (%rdi), %zmm0\nLONG $0x487cf162; WORD $0x0659 // vmulps (%rsi), %zmm0, %zmm0\nLONG $0x487cf162; WORD $0x0211 // vmovups %zmm0, (%rdx)\nLONG $0x40c78348 // addq $64, %rdi\nLONG $0x40c68348 // addq $64, %rsi\nLONG $0x40c28348 // addq $64, %rdx\nLONG $0xffc08341 // addl $-1, %r8d\nJNE LBB3_5\nLBB3_6:\nWORD $0xf983; BYTE $0x07 // cmpl $7, %ecx\nJLE LBB3_8\nLONG $0x0710fcc5 // vmovups (%rdi), %ymm0\nLONG $0x0659fcc5 // vmulps (%rsi), %ymm0, %ymm0\nLONG $0x0211fcc5 // vmovups %ymm0, (%rdx)\nLONG $0x20c78348 // addq $32, %rdi\nLONG $0x20c68348 // addq $32, %rsi\nLONG $0x20c28348 // addq $32, %rdx\nWORD $0xc183; BYTE $0xf8 // addl $-8, %ecx\nLBB3_8:\nWORD $0xc985 // testl %ecx, %ecx\nJLE LBB3_14\nWORD $0xc989 // movl %ecx, %ecx\nLONG $0xff418d48 // leaq -1(%rcx), %rax\nWORD $0x8941; BYTE $0xc8 // movl %ecx, %r8d\nLONG $0x03e08341 // andl $3, %r8d\nLONG $0x03f88348 // cmpq $3, %rax\nJAE LBB3_15\nWORD $0xc031 // xorl %eax, %eax\nJMP LBB3_11\nLBB3_15:\nWORD $0xe183; BYTE $0xfc // andl $-4, %ecx\nWORD $0xc031 // xorl %eax, %eax\nLBB3_16:\nLONG $0x0410fac5; BYTE $0x87 // vmovss (%rdi,%rax,4), %xmm0\nLONG $0x0459fac5; BYTE $0x86 // vmulss (%rsi,%rax,4), %xmm0, %xmm0\nLONG $0x0411fac5; BYTE $0x82 // vmovss %xmm0, (%rdx,%rax,4)\nLONG $0x4410fac5; WORD $0x0487 // vmovss 4(%rdi,%rax,4), %xmm0\nLONG $0x4459fac5; WORD $0x0486 // vmulss 4(%rsi,%rax,4), %xmm0, %xmm0\nLONG $0x4411fac5; WORD $0x0482 // vmovss %xmm0, 4(%rdx,%rax,4)\nLONG $0x4410fac5; WORD $0x0887 // vmovss 8(%rdi,%rax,4), %xmm0\nLONG $0x4459fac5; WORD $0x0886 // vmulss 8(%rsi,%rax,4), %xmm0, %xmm0\nLONG $0x4411fac5; WORD $0x0882 // vmovss %xmm0, 8(%rdx,%rax,4)\nLONG $0x4410fac5; WORD $0x0c87 // vmovss 12(%rdi,%rax,4), %xmm0\nLONG $0x4459fac5; WORD $0x0c86 // vmulss 12(%rsi,%rax,4), %xmm0, %xmm0\nLONG $0x4411fac5; WORD $0x0c82 // vmovss %xmm0, 12(%rdx,%rax,4)\nLONG $0x04c08348 // addq $4, %rax\nWORD $0x3948; BYTE $0xc1 // cmpq %rax, %rcx\nJNE LBB3_16\nLBB3_11:\nWORD $0x854d; BYTE $0xc0 // testq %r8, %r8\nJE LBB3_14\nLONG $0x820c8d48 // leaq (%rdx,%rax,4), %rcx\nLONG $0x86148d48 // leaq (%rsi,%rax,4), %rdx\nLONG $0x87048d48 // leaq (%rdi,%rax,4), %rax\nWORD $0xf631 // xorl %esi, %esi\nLBB3_13:\nLONG $0x0410fac5; BYTE $0xb0 // vmovss (%rax,%rsi,4), %xmm0\nLONG $0x0459fac5; BYTE $0xb2 // vmulss (%rdx,%rsi,4), %xmm0, %xmm0\nLONG $0x0411fac5; BYTE $0xb1 // vmovss %xmm0, (%rcx,%rsi,4)\nLONG $0x01c68348 // addq $1, %rsi\nWORD $0x3949; BYTE $0xf0 // cmpq %rsi, %r8\nJNE LBB3_13\nLBB3_14:\nWORD $0x8948; BYTE $0xec // movq %rbp, %rsp\nBYTE $0x5d // popq %rbp\nWORD $0xf8c5; BYTE $0x77 // vzeroupper\nBYTE $0xc3 // retq\n</code></pre> <p>:::</p>"},{"location":"backup/blog/avx512-in-golang/#generate-go-function-definitions","title":"Generate Go Function Definitions","text":"<p>Converting C function definitions to Go functions requires a C parser. cznic implements a C-to-Go converter in Go cc/v3 which provides a C parser. The function definition conversion consists of two parts.</p> <ul> <li>Function name: Directly use the function name of the C function as the Go function name</li> <li>Function arguments: Need to check that function arguments must be of the 64-bit type, passed in Go functions using <code>unsafe.Pointer</code></li> </ul> <p>The definition of the <code>_mm512_mul_to</code> conversion to a Go function is as follows</p> <pre><code>import \"unsafe\"\n//go:noescape\nfunc _mm512_mul_to(a, b, c, n unsafe.Pointer)\n</code></pre>"},{"location":"backup/blog/avx512-in-golang/#build-with-go-generate","title":"Build with <code>go generate</code>","text":"<p>For generated code, the <code>go generate</code> command can run custom commands to do conversions from C functions to Go functions. gorse added the <code>go generate</code> command to the floats_amd64.go file, which executes <code>go generate . /...</code> to automatically generate Go vectorized functions.</p> <pre><code>//go:generate go run ... /... /cmd/goat src/floats_avx.c -O3 -mavx\n//go:generate go run ... /... /cmd/goat src/floats_avx512.c -O3 -mavx -mfma -mavx512f -mavx512dq\n</code></pre>"},{"location":"backup/blog/avx512-in-golang/#function-calls","title":"Function Calls","text":"<p>Calling the vectorized function is not a simple task, because only new CPUs support AVX512, and some older CPUs do not even support AVX2, which requires the following steps when calling the vectorized function.</p> <ol> <li>Provide a non-vectorized function implementation for CPUs that do not support AVX512.</li> <li>Detect in the <code>init</code> function whether the currently running CPU supports AVX512.</li> <li>Wrapping an outer function automatically selects a vectorized or non-vectorized function depending on CPU instruction support.</li> </ol> <p>The complete wrapper is as follows</p> <pre><code>import (\n\"github.com/klauspost/cpuid/v2\"\n\"unsafe\"\n)\n// CPU instruction flag\nvar impl = Default\nconst (\nDefault int = iota\nAVX512\n)\nfunc init() {\n// Check if the CPU supports AVX512\nif cpuid.CPU.Supports(cpuid.AVX512F, cpuid.AVX512DQ) {\nimpl = AVX512\n}\n}\n// Non-vectorized implementation\nfunc mulTo(a, b, c []float32) {\nfor i := range a {\nc[i] = a[i] * b[i]\n}\n}\n// Wrapper functions\nfunc MulTo(a, b, c []float32) {\nif len(a) ! = len(b) || len(a) ! = len(c) {\npanic(\"floats: slice lengths do not match\")\n}\n// Automatic selection of functions for execution\nswitch impl {\ncase AVX512:\n_mm512_mul_to(unsafe.Pointer(&amp;a[0]), unsafe.Pointer(&amp;b[0]), unsafe.Pointer(&amp;c[0]), unsafe.Pointer(uintptr(len(a))))\ndefault:\nmulTo(a, b, c)\n}\n}\n</code></pre> <p>::: note</p> <p>Go assembly should be saved in a file with the <code>.s</code> extension and the Go definition and wrapper should be saved in Go files. They must be in the same directory with the same package name.</p> <p>:::</p>"},{"location":"backup/blog/avx512-in-golang/#summary","title":"Summary","text":"<p>Finally, we benchmark the performance of the non-vectorized function and the vectorized function.</p> <ul> <li>Vectorized functions take significantly less time than non-vectorized functions, especially when the vector length is 128.</li> <li>The AVX512 implementation has a slight performance increase relative to the AVX2 implementation.</li> </ul> <p>::: echarts Vectorized Implementation Performance Benchmark</p> <pre><code>{\n\"legend\": {\n\"data\": [\"SISD\", \"AVX2\", \"AVX512\"]\n},\n\"xAxis\": {\n\"name\": \"vector-length\",\n\"type\": \"category\",\n\"data\": [16, 32, 64, 128]\n},\n\"yAxis\": {\n\"name\": \"ns/op\",\n\"type\": \"value\"\n},\n\"series\": [\n{\n\"name\": \"SISD\",\n\"data\": [10.56, 23.13, 38.01, 67.05],\n\"type\": \"bar\",\n\"showBackground\": true,\n\"backgroundStyle\": {\n\"color\": \"rgba(180, 180, 180, 0.2)\"\n}\n},\n{\n\"name\": \"AVX2\",\n\"data\": [5.046, 5.138, 6.074, 8.294],\n\"type\": \"bar\",\n\"showBackground\": true,\n\"backgroundStyle\": {\n\"color\": \"rgba(180, 180, 180, 0.2)\"\n}\n},\n{\n\"name\": \"AVX512\",\n\"data\": [4.741, 5.417, 5.583, 6.425],\n\"type\": \"bar\",\n\"showBackground\": true,\n\"backgroundStyle\": {\n\"color\": \"rgba(180, 180, 180, 0.2)\"\n}\n}\n]\n}\n</code></pre> <p>:::</p> <p>In addition, the SIMD instructions Neon for ARM can also be used in Go by the idea of this post. goat also supports ARM, and Gorse also implements vectorized computation libraries for Neon instructions (refer to github.com/gorse-io/gorse/base/floats). You are welcome to use goat to build your own vectorized functions in Go projects, more questions are welcome in Issues or Discord.</p>"},{"location":"backup/blog/frontend-in-go-modules/","title":"Integrate Frontend Artifacts via Go Modules","text":"<p>The ability to compile into a single binary is a great feature of the Go programming language, avoiding dependency management at deployment time. However, if the project contains front-end code, we need to find a way to embed the front-end artifact into the Go binary at compile time. The compilation process is as follows.</p> <pre><code>flowchart LR\n  frontend[Compile frontend code]--&gt;embed[Embed to Go code]--&gt;build[Compile Go code]</code></pre> <ol> <li>Compile the front-end code.</li> <li>Convert front-end artifacts to Go embedding files. For example, the project rakyll/statik is able to embed any file into the Go source code. In addition, the Go language currently provides an official embedding solution embed that allows embedding to be done during compilation, eliminating step 2.</li> <li>Build Go code.</li> </ol> <p>Usually front-end code and Go code are placed in the same repository or put into the Go repository through git submodule and compiled through Makefile or build scripts. But such a solution has a small drawback, we need to install the front-end toolchain when developing a Go project. For a project like Gorse, most of the development work is on the backend, and the front-end changes are very minimal. It is unnecessary to compile the front-end every time the repository is pulled, so a solution is needed to avoid the front-end compilation process during Go development. The Gorse project compiles the dashboard front-end code into a separate Go package that is integrated into the main repository via Go modules.</p>"},{"location":"backup/blog/frontend-in-go-modules/#compile-front-end-into-go-packages","title":"Compile Front-end into Go Packages","text":"<p>rakyll/statik can embed front-end artifacts into Go code, then it is perfectly possible to have the converted code referenced by Gorse as a separate Go package. Then after each modification of the front-end code:</p> <ol> <li>Compile the front-end code.</li> <li>Use rakyll/statik to convert front-end artifacts to Go embedding files and initialize Go packages with <code>go mod init</code> and <code>go mod tidy</code>.</li> <li>Push the Go package to the repository or branch used to store the artifact.</li> </ol> <p>The above process can be written as a script, and since the Gorse front-end repository is hosted on GitHub, it can be automatically updated each time the front-end code is committed through GitHub Action.</p> <pre><code>name: build\non:\npush:\nbranches: [ master ] # Triggered when master commits code\njobs:\nbuild:\nruns-on: ubuntu-latest\nsteps:\n# Compile front-end code\n- uses: actions/checkout@v2\n- name: Install dependencies\nuses: borales/actions-yarn@v2.0.0\nwith:\ncmd: install\n- name: Build for production\nuses: borales/actions-yarn@v2.0.0\nwith:\ncmd: build\n# Embed into Go source code\n- name: Install Go\nuses: actions/setup-go@v2\n- name: Install statik &amp; build embed files\nrun: |\nexport PATH=$PATH:$(go env GOPATH)/bin\ngo get github.com/rakyll/statik\nstatik -src=dist\n# Commit Go source code\n- name: Commit embed files\nrun: |\ncd ...\ngit clone https://github.com/gorse-io/dashboard.git dashboard-statik\ncd dashboard-statik\ngit config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\ngit config --local user.name \"github-actions[bot]\"\ngit checkout statik || git checkout --orphan statik\ngit rm -r --cached .\nrm statik.go go.mod go.sum\ncp -f ... /dashboard/statik/statik.go statik.go\ngo mod init github.com/gorse-io/dashboard\ngo mod tidy\ngit add statik.go go.mod go.sum\ngit commit -m \"Build embed files\"\ngit remote-set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}\ngit push origin statik\n</code></pre> <p>The above GitHub Action commits the Go code to the statik branch.</p>"},{"location":"backup/blog/frontend-in-go-modules/#using-front-end-artifacts-via-go-modules","title":"Using Front-end Artifacts via Go Modules","text":"<p>First, download the front-end artifact package. Since the product is stored on the statik branch, you need to add <code>@statik</code> after the package name.</p> <pre><code>go get -u github.com/gorse-io/dashboard@statik\n</code></pre> <p>Then, <code>github.com/gorse-io/dashboard</code> is imported and the front-end static files are saved in the filesystem created by <code>fs.New()</code>.</p> <pre><code>import (\n\"github.com/rakyll/statik/fs\"\n_ \"github.com/gorse-io/dashboard\"\n)\n// ...\nstatikFS, err := fs.New()\nif err ! = nil {\nlog.Fatal(err)\n}\n// Example: Accessing the file system via HTTP\nhttp.Handle(\"/\", http.FileServer(statikFS))\nhttp.ListenAndServe(\":8080\", nil)\n</code></pre>"},{"location":"backup/blog/frontend-in-go-modules/#summary","title":"Summary","text":"<p>Using Go modules to manage front-end artifacts is elegant, but only suitable for projects with few front-end changes. For projects where front-end and back-end development often needs joint debugging, such as mall projects, it is more appropriate to put the front-end and back-end code in the same repository.</p>"},{"location":"backup/reference/crossline/","title":"Crossline","text":"<p>I'm crossline</p> <p>If you want to build a project, you can hire Scifabric for designing, building, and analysing your data. Check Scifabric solutions.</p> <p>\ud83d\udca1 Note: If you want to build a project, you can hire Scifabric for designing,   building, and analysing your data. Check Scifabric solutions.</p> <p>I'm developing a cross-platfrom command line tool which can support autocomplete and history. Readline library is the first choice, but it can't use on Windows directly and you need to link the readline library explicitly. You also need to install the libreadline-dev package to build and if target machine version mismatches with build machine, the program can't run. The libreadline has over 30K LOC and has two so files: libreadline.so libhistory.so, and it depends on libncurses also.</p> <p>introduction1</p> <p>introduction2</p> <p>introduction3</p> <p>introduction4</p> <p>introduction5</p> <p>Crossline is a small, self-contained, zero-config, MIT licensed, cross-platform, readline and libedit replacement.</p> <p>When should you use Crossline: * When you need a cross-platform readline: Windows, Linux, Unix, MacOS. * When you need a simple but versatile readline: more shortcuts, advanced search, simple autocomplete, paging, cusor APIs, color APIs, embedded help, etc. * When you need a customized readline: easy to extend. * When you need a small readline to build into program.</p> <p></p>"},{"location":"backup/reference/crossline/#catalogue","title":"Catalogue","text":"<ul> <li>Features and Highlights</li> <li>Background</li> <li>Shortcuts</li> <li>Multiple Line Mode</li> <li>History Search</li> <li>Crossline APIs</li> <li>Color APIs</li> <li>Paging APIs</li> <li>Cursor APIs</li> <li>Simple Example</li> <li>SQL Parser Example</li> <li>Keyboard Debug</li> <li>Embedded Help</li> <li>Extend Crossline</li> <li>Customized Config</li> <li>Build and Test</li> <li>Related Projects</li> </ul>"},{"location":"backup/reference/crossline/#features-and-highlights","title":"Features and Highlights","text":"<ul> <li>Support many platforms: Windows, Linux, vt100 and xterm.</li> <li>Support total <code>79 shortcuts</code> and <code>40 functions</code>.</li> <li>Support most readline shortcuts (Emacs Standard bindings): move, edit, cut&amp;paste, complete, history, control.</li> <li>Support fast move between lines with <code>Up</code> <code>Down</code> and <code>Ctrl/Alt+Up</code> <code>Ctrl/Alt+Down</code> keys in multiple line edit mode.</li> <li>Support some Windows command line shortcuts and extend some new convenient shortcuts.</li> <li>Support history navigation, history show/clear and history save/load.</li> <li>Support readline with initial input for editing.</li> <li>Support autocomplete, key word help and syntax hints.</li> <li>Support powerful interactive history search with multiple case insensitive including and excluding match patterns.</li> <li>Support same edit shortcuts (except complete and history shortcuts) in history search mode.</li> <li>Support color text for prompt, autocomplete, hints.</li> <li>Support auto resizing when editing window/terminal size changed.</li> <li>Support autocomplete, history show/search, help info paging.</li> <li>Support cross platform paging control APIs.</li> <li>Support cross platform cursor control APIs.</li> <li>Support cross platform color control APIs.</li> <li>Support convenient embedded <code>F1</code> help in edit and history search mode, and you can call it anytime without losing current input.</li> <li>Support convenient embedded <code>Ctrl-^</code> keyboard debug mode to watch key code sequences.</li> <li>Support <code>Ctrl-C</code> to exit edit and <code>Ctrl-Z</code> to suspend and resume job(Linux) in both edit and search mode.</li> <li>Support pipe as input.</li> <li>Pure C MIT license source code, no 3rd library dependency.</li> <li>No any dynamic memory operations: malloc/free/realloc/new/delete/strdup/etc.</li> <li>Very small only about 1200 LOC, and code logic is simple and easy to read.</li> <li>Easy to customize your own shortcuts and new features.</li> <li>Unicode is to be supported later.</li> </ul>"},{"location":"backup/reference/crossline/#background","title":"Background","text":"<p>I'm developing a cross-platfrom command line tool which can support autocomplete and history. Readline library is the first choice, but it can't use on Windows directly and you need to link the readline library explicitly. You also need to install the libreadline-dev package to build and if target machine version mismatches with build machine, the program can't run. The libreadline has over 30K LOC and has two so files: libreadline.so libhistory.so, and it depends on libncurses also.</p> <p>Then I searched and found there's a small readline replacement linenoise written by Redis's author. Linenoise is used in Redis, MongoDB, and Android. It's very small (about 1,100 LOC), but it can only run on Linux and supports few shortcuts and features. Then I found there's a more powerful library linenoise-ng used in ArangoDB. It's based on MongoDB's linenoise which enhanced original linenoise to support Windows, more shortcuts, features and Unicode. But the code is embedded in MongoDB source code, then ArangoDB ported it out, did some improvements and made it an independent library.</p> <p>At first I planned to use linenoise-ng, but I found it's still big (about 4,300 LOC) and complex. It uses C++ and C together, and C/C++ dynamic memory is used also which is there in original linenoise. I think it can be much simpler, then I did some prototype verification, and use a different method to implement this brand new, simple, pure C cross-platform enhanced readline replacement library.</p>"},{"location":"backup/reference/crossline/#shortcuts","title":"Shortcuts","text":"<p>Misc Commands</p> Shortcut Action F1 Show edit shortcuts help. Ctrl-^ Enter keyboard debugging mode. <p>Move Commands</p> Shortcut Action Ctrl-B, Left Move back a character. Ctrl-F, Right Move forward a character. Up Move cursor to up line. (For multiple lines) Ctrl-Up, Alt-Up, ESC+Up Move cursor to up line. (Ctrl-Up, Alt-Up only supports Windows/Xterm) Down Move cursor to down line. (Ctrl-Down, Alt-Down only support Windows/Xterm) Ctrl-Down, Alt-Down, ESC+Down Move cursor to down line. (Ctrl-Down, Alt-Down only support Windows/Xterm) Alt-B, Ctrl-Left, Alt-Left, ESC+Left Move back a word. (Ctrl-Left, Alt-Left only support Windows/Xterm) Alt-F, Ctrl-Right, Alt-Right, ESC+Right Move forward a word. (Ctrl-Right, Alt-Right only support Windows/Xterm) Ctrl-A, Home Move cursor to start of line. Ctrl-E, End Move cursor to end of line. Ctrl-L Clear screen and redisplay line. <p>Edit Commands</p> Shortcut Action Ctrl-H, Backspace Delete character before cursor. Ctrl-D, DEL Delete character under cursor. Alt-U Uppercase current or following word. Alt-L Lowercase current or following word. Alt-C Capitalize current or following word. Alt-\\ Delete whitespace around cursor. Ctrl-T Transpose previous character with current character. <p>Cut&amp;Paste Commands</p> Shortcut Action Ctrl-K, Ctrl-End, Alt-End, ESC+End Cut from cursor to end of line. (Ctrl-End, Alt-End only support Windows/Xterm) Ctrl-U, Ctrl-Home, Alt-Home, ESC+Home Cut from start of line to cursor. (Ctrl-Home, Alt-Home only support Windows/Xterm) Ctrl-X Cut whole line. Alt-Backspace, Clt-Backspace, Esc+Backspace Cut word to left of cursor. (Clt-Backspace only supports Windows/Xterm) Alt-D, Alt-Del, Ctrl-Del, ESC+Del Cut word following cursor. (Alt-Del,Ctrl-Del only support Windows/Xterm) Ctrl-W Cut to left till whitespace (not word). Ctrl-Y, Ctrl-V, Insert Paste last cut text. <p>Complete Commands</p> Shortcut Action TAB, Ctrl-I Autocomplete. Alt-=, Alt-? List possible completions. <p>History Commands</p> Shortcut Action Ctrl-P, Up Fetch previous line in history. (Up works when cursor in first line or end of last line) Ctrl-N, Down Fetch next line in history. (Down works when cursor in last line) Alt-&lt;,  PgUp Move to first line in history. Alt-&gt;,  PgDn Move to end of input history. Ctrl-R, Ctrl-S Search history. F4 Search history with current input. F1 Show search help when in search mode. F2 Show history. F3 Clear history (need confirm). <p>Control Commands</p> Shortcut Action Enter,  Ctrl-J, Ctrl-M EOL and accept line. Ctrl-C, Ctrl-G EOF and abort line. Ctrl-D EOF if line is empty. Alt-R Revert line. Undo all changes made to this line. Ctrl-Z Suspend Job. (Linux only, fg will resume edit) <p>Notes</p> <ul> <li>In multiple lines, <code>Up/Down</code> can move between lines. <code>Up</code> will fetch history when in first line or end of last line(for quick history move), and <code>Down</code> will fetch history when in last line.</li> <li>For Windows and xterm, almost all shortcuts are supported.</li> <li>For some terminal tools you need to enable Alt as meta key.   SecureCRT: check <code>Terminal-&gt;Emulation-&gt;Emacs-&gt;use ALT as meta key</code></li> <li>Backspace key is 8 or 127, and Del key should use Escape code.   SecurCRT: check <code>Terminal-&gt;Emulation-&gt;Mapped Keys-&gt;Backspace sends delete</code></li> <li>For vt100 and Linux terminals, many <code>Alt-key</code> doesn't work, and an alternate way is to press <code>ESC</code> first then press key, see above <code>ESC+Key</code>.   Putty can send <code>Alt</code> as <code>ESC</code>, so no need to do this way.</li> <li><code>Ctrl+S</code> is readline shortcut to search history also, but it'll halt terminal, so don't use it with Linux system, use <code>Ctrl+Q</code> to exit freezing state if pressing by mistake.</li> </ul> <p>Terminal Limitations</p> <ul> <li>Some terminals only support <code>left Alt</code>.</li> <li>Linux console doesn't support: <code>Alt-?</code>, <code>Alt-&lt;</code>, <code>Alt-&gt;</code>.</li> <li>SecureCRT vt100 doesn't support: <code>Home</code>, <code>End</code>, <code>Del</code>, <code>Insert</code>, <code>PgUp</code>, <code>PgDn</code>.</li> <li>SecureCRT xterm doesn't support: <code>Ctrl-Home</code>, <code>Alt-Home</code>, <code>Ctrl-End</code>, <code>Alt-End</code>, <code>Alt-Del</code>, <code>Ctrl-Del</code>, <code>Clt-Backspace</code>.</li> </ul> <p>Goto Top</p>"},{"location":"backup/reference/crossline/#multiple-line-mode","title":"Multiple Line Mode","text":"<p>Crossline supports multiple line edit mode like readline. If you input a very long line and then you want to edit some part many lines above, it's not convenient to move to the position quickly even with Ctrl+Left. I used to copy input text to a GUI editor like notepad++, then edit and copy back. </p> <p>To move quickly in multiple lines, I implemented a multiple line edit mode like other editors and can use <code>Ctrl/Alt+Up</code> <code>Ctrl/Alt+Down</code> to move between lines quickly. You can also use <code>Up</code> <code>Down</code> key and to keep the original history shortcuts, the key behavior will behave as following:</p> <ul> <li>For single line, <code>Up</code> <code>Down</code> key are history shortcuts.</li> <li>In first line of multiple lines, <code>Down</code> key will move to below line, <code>Up</code> key will fetch previous history.</li> <li>In middle line of multiple lines, <code>Down</code> key will move to below line, <code>Up</code> key will move to above line.</li> <li>In last line(cursor not at end) of multiple lines, <code>Down</code> key will fetch next history, <code>Up</code> key will move to above line.</li> <li>In last line(cursor at end) of multiple lines, <code>Up</code> <code>Down</code> key are history shortcuts. This is to keep navigating history quickly.</li> <li><code>Ctrl-P</code> <code>Ctrl-N</code> history shortcuts are not changed.</li> </ul> <p>So if you want to use <code>Up</code> <code>Down</code> to move quickly between lines, make sure the cursor is not at end of last line, and if you want to navigate history quickly with <code>Up</code> <code>Down</code>, make sure the cursor is at end of last line in multiple lines.</p>"},{"location":"backup/reference/crossline/#history-search","title":"History Search","text":"<p>Original readline supports incremental search(<code>Ctrl-R</code>,<code>Ctrl-S</code>) and none-incremental search(<code>Alt-N</code>,<code>Alt-P</code>). I tried both and think they're not convenient or efficient to use, so I implemented a brand new interactive search method.</p> <p>Enter interactive history search mode</p> <ul> <li><code>Ctrl-R</code>: Search history.</li> <li><code>F4</code>: Search history with current input as search patterns.</li> </ul> <p>Exit interactive history search mode</p> <ul> <li><code>Ctrl-C</code>: You can exit search mode anytime and keep your original input.</li> <li><code>Ctrl-D</code>: On empty line only.</li> </ul> <p>Input patterns</p> <ul> <li>You can use all edit shortcuts except complete and history shortcuts.</li> <li>You can use <code>Insert</code>,<code>Ctrl-Y</code>,<code>Ctrl-S</code> to paste last search patterns.</li> <li>If nothing input will show all history (<code>F2</code> can show history too).</li> </ul> <p>Patterns syntax</p> <p>You can press <code>F1</code> to get help. Patterns are separated by <code>' '</code>, patter match is <code>case insensitive</code>. * <code>select</code>:   choose line including <code>select</code> * <code>-select</code>:  choose line excluding <code>select</code> * <code>\"select from\"</code>:  choose line including <code>select from</code> * <code>-\"select from\"</code>: choose line excluding <code>select from</code> * <code>\"select from\" where -\"order by\" -limit</code> : choose line including <code>select from</code> and <code>where</code> and excluding <code>order by</code> or <code>limit</code></p> <p>Select history</p> <ul> <li>If only one history is found, id <code>1</code> is provided automatically, and you just press <code>Enter</code> to select.</li> <li>You can press <code>Ctrl-C</code> to skip choosing.</li> <li>You can press <code>Enter</code> or <code>Ctrl-D</code> on empty line to skip choosing.</li> </ul> <p>Example</p> <pre><code>SQL&gt; &lt;F2&gt; // show history\n   1  hello world\n   2  select from user\n   3  from select table\n   4  SELECT from student\n   5  Select from teacher\n\nSQL&gt; &lt;Ctrl+R&gt;\nInput Patterns &lt;F1&gt; help: select from\n   1  select from user\n   2  from select table\n   3  SELECT from student\n   4  Select from teacher\nInput history id: 3\nSQL&gt; SELECT from student&lt;Alt+R&gt; // Revert line\n\nSQL&gt; &lt;F4&gt;\nInput Patterns &lt;F1&gt; help: &lt;Insert&gt; // paste last history pattern: select from\nInput Patterns &lt;F1&gt; help: \"select from\"\n   1  select from user\n   2  SELECT from student\n   3  Select from teacher\nInput history id: 3\nSQL&gt; Select from teacher&lt;Alt+R&gt;\n\nSQL&gt; SELECT from&lt;F4&gt; // search with pattern: Select from\nInput Patterns &lt;F1&gt; help: SELECT from\nInput Patterns &lt;F1&gt; help: \"SELECT from\" -user -teacher\n   1  SELECT from student\nInput history id: 1\nSQL&gt; SELECT from student\n</code></pre> <p>Goto Top</p>"},{"location":"backup/reference/crossline/#crossline-apis","title":"Crossline APIs","text":"<pre><code>// Main API to read a line, return buf if get line, return NULL if EOF.\nchar* crossline_readline (const char *prompt, char *buf, int size);\n// Same with crossline_readline except buf holding initial input for editing.\nchar* crossline_readline2 (const char *prompt, char *buf, int size);\n// Set move/cut word delimiter, default is all not digital and alphabetic characters.\nvoid  crossline_delimiter_set (const char *delim);\n// Read a character from terminal without echo\nint     crossline_getch (void);\n</code></pre> <ul> <li>History APIs</li> </ul> <pre><code>// Save history to file\nint   crossline_history_save (const char *filename);\n// Load history from file\nint   crossline_history_load (const char *filename);\n// Show history in buffer\nvoid  crossline_history_show (void);\n// Clear history\nvoid  crossline_history_clear (void);\n</code></pre> <ul> <li>Completion APIs</li> </ul> <pre><code>typedef struct crossline_completions_t crossline_completions_t;\ntypedef void (*crossline_completion_callback) (const char *buf, crossline_completions_t *pCompletions);\n// Register completion callback\nvoid  crossline_completion_register (crossline_completion_callback pCbFunc);\n// Add completion in callback. Word is must, help for word is optional.\nvoid  crossline_completion_add (crossline_completions_t *pCompletions, const char *word, const char *help);\n// Set syntax hints in callback\nvoid  crossline_hints_set (crossline_completions_t *pCompletions, const char *hints);\n</code></pre>"},{"location":"backup/reference/crossline/#color-apis","title":"Color APIs","text":"<p>Color definitions</p> Color Note CROSSLINE_FGCOLOR_DEFAULT If not set, it's the default value. CROSSLINE_FGCOLOR_BLACK Set text color to black. <code>\\t</code> is not supported in Linux terminal, same below CROSSLINE_FGCOLOR_RED Set text color to red. CROSSLINE_FGCOLOR_GREEN Set text color to green. CROSSLINE_FGCOLOR_YELLOW Set text color to yellow. CROSSLINE_FGCOLOR_BLUE Set text color to blue. CROSSLINE_FGCOLOR_MAGENTA Set text color to magenta. CROSSLINE_FGCOLOR_CYAN Set text color to cyan. CROSSLINE_FGCOLOR_WHITE Set text color to white. CROSSLINE_FGCOLOR_BRIGHT Set text color bright. CROSSLINE_BGCOLOR_DEFAULT If not set, it's the default value. CROSSLINE_BGCOLOR_BLACK Set background color to black. <code>\\t</code> is not supported in Linux terminal, same below. Don't use <code>\\n</code> in Linux terminal, same below. CROSSLINE_BGCOLOR_RED Set background color to red. CROSSLINE_BGCOLOR_GREEN Set background color to green. CROSSLINE_BGCOLOR_YELLOW Set background color to yellow. CROSSLINE_BGCOLOR_BLUE Set background color to blue. CROSSLINE_BGCOLOR_MAGENTA Set background color to magenta. CROSSLINE_BGCOLOR_CYAN Set background color to cyan. CROSSLINE_BGCOLOR_WHITE Set background color to white. CROSSLINE_BGCOLOR_BRIGHT Set background color bright. CROSSLINE_UNDERLINE Set text to underline style. CROSSLINE_COLOR_DEFAULT If not set, it's the default value. <p><code>CROSSLINE_FGCOLOR_DEFAULT</code>, <code>CROSSLINE_BGCOLOR_DEFAULT</code>, <code>CROSSLINE_COLOR_DEFAULT</code> are all zero, so it's fine to leave without it or just give 0.</p> <p>Color APIs</p> <pre><code>// Set text color, CROSSLINE_COLOR_DEFAULT will revert to default setting\n// `\\t` is not supported in Linux terminal, same below. Don't use `\\n` in Linux terminal, same below.\nvoid crossline_color_set (crossline_color_e color);\n// Set default prompt color\nvoid crossline_prompt_color_set (crossline_color_e color);\n// Add completion with color.\nvoid  crossline_completion_add_color (crossline_completions_t *pCompletions, const char *word, crossline_color_e wcolor, const char *help, crossline_color_e hcolor);\n// Set syntax hints with color\nvoid  crossline_hints_set_color (crossline_completions_t *pCompletions, const char *hints, crossline_color_e color);\n</code></pre> <p>Color Example</p> <p>You can get the color example code in <code>example2.c</code> <code>color_test()</code></p> <p></p> <p>Goto Top</p>"},{"location":"backup/reference/crossline/#paging-apis","title":"Paging APIs","text":"<p>These APIs are used internally first, then I think they're common and can be used by CLI tools also, so make them open.</p> <pre><code>// Reset paging before starting paging control\nvoid crossline_paging_reset (void);\n// Check paging after print a line, return 1 means quit, 0 means continue\n// if you know only one line is printed, just give line_len = 1\nint  crossline_paging_check (int line_len);\n</code></pre> <p>Code in <code>example2.c</code> <pre><code>static void pagint_test ()\n{\nint i;\ncrossline_paging_reset ();\nfor (i = 0; i &lt; 256; ++i) {\nprintf (\"Paging test: %3d\\n\", i);\nif (crossline_paging_check (sizeof(\"paging test: \") + 3)) {\nbreak;\n}\n}\n}\n</code></pre></p> <p>It'll work as following:</p> <pre><code>Crossline&gt; paging\nRead line: \"paging\"\nPaging test:   0\nPaging test:   1\nPaging test:   2\nPaging test:   3\nPaging test:   4\nPaging test:   5\nPaging test:   6\n*** Press &lt;Space&gt; or &lt;Enter&gt; to continue . . .\n</code></pre>"},{"location":"backup/reference/crossline/#cursor-apis","title":"Cursor APIs","text":"<p>These APIs are used internally first, then I think they're common and can be used by CLI tools also, so make them open and write some APIs which are not used by crossline at all.</p> <pre><code>// Get screen rows and columns\nvoid crossline_screen_get (int *pRows, int *pCols);\n// Clear current screen\nvoid crossline_screen_clear (void);\n// Get cursor postion (0 based)\nint  crossline_cursor_get (int *pRow, int *pCol);\n// Set cursor postion (0 based)\nvoid crossline_cursor_set (int row, int col);\n/* Move cursor with row and column offset, \n *   row_off &gt; 0 move up row_off lines, \n *           &lt; 0 move down abs(row_off) lines\n *           = 0 no move for row, \n *   similar with col_off\n */\nvoid crossline_cursor_move (int row_off, int col_off);\n// Hide or show cursor\nvoid crossline_cursor_hide (int bHide);\n</code></pre> <p>Goto Top</p>"},{"location":"backup/reference/crossline/#simple-example","title":"Simple Example","text":"<p><code>example.c</code> is a very simple example to use crossline.</p> <pre><code>static void completion_hook (char const *buf, crossline_completions_t *pCompletion)\n{\nint i;\nstatic const char *cmd[] = {\"insert\", \"select\", \"update\", \"delete\", \"create\", \"drop\", \"show\", \"describe\", \"help\", \"exit\", \"history\", \"insert\", \"select\", \"update\", \"delete\", \"create\", \"drop\", \"show\", \"describe\", \"help\", \"exit\", \"history\", NULL};\nfor (i = 0; NULL != cmd[i]; ++i) {\nif (0 == strncmp(buf, cmd[i], strlen(buf))) {\ncrossline_completion_add (pCompletion, cmd[i], NULL);\n}\n}\n}\nint main ()\n{\nchar buf[256];\ncrossline_completion_register (completion_hook);\ncrossline_history_load (\"history.txt\");\nwhile (NULL != crossline_readline (\"Crossline&gt; \", buf, sizeof(buf))) {\nprintf (\"Read line: \\\"%s\\\"\\n\", buf);\n}    crossline_history_save (\"history.txt\");\nreturn 0;\n}\n</code></pre> <p><code>example2.c</code> is an enhanced example, which supports color, color test, paging test and have the edit with initial input example.</p>"},{"location":"backup/reference/crossline/#sql-parser-example","title":"SQL Parser Example","text":"<p><code>example_sql.c</code>, this example implements a simple SQL syntax parser with following syntax format, please read code for details.</p> <p><pre><code>INSERT INTO &lt;table&gt; SET column1=value1,column2=value2,...\nSELECT &lt;* | column1,columnm2,...&gt; FROM &lt;table&gt; [WHERE] [ORDER BY] [LIMIT] [OFFSET]\nUPDATE &lt;table&gt; SET column1=value1,column2=value2 [WHERE] [ORDER BY] [LIMIT] [OFFSET]\nDELETE FROM &lt;table&gt; [WHERE] [ORDER BY] [LIMIT] [OFFSET]\nCREATE [UNIQUE] INDEX &lt;name&gt; ON &lt;table&gt; (column1,column2,...)\nDROP {TABLE | INDEX} &lt;name&gt;\nSHOW {TABLES | DATABASES}\nDESCRIBE &lt;TABLE&gt;\nhelp {INSERT | SELECT | UPDATE | DELETE | CREATE | DROP | SHOW | DESCRIBE | help | exit | history}\n</code></pre> You can use this example to practice the shortcuts above.</p> <pre><code>SQL&gt; &lt;TAB&gt;  // show autocomplete words and help\nINSERT      Insert a record to table\nSELECT      Select records from table\nUPDATE      Update records in table\nDELETE      Delete records from table\nCREATE      Create index on table\nDROP        Drop index or table\nSHOW        Show tables or databases\nDESCRIBE    Show table schema\nhelp        Show help for Topic\nexit        Exit shell\nhistory     Show history\n*** Press &lt;Space&gt; or &lt;Enter&gt; to continue . . .\nSQL&gt; help &lt;TAB&gt; // show autocomplete words list\nINSERT    SELECT    UPDATE    DELETE    CREATE    DROP      SHOW\nDESCRIBE  help      exit      history\nSQL&gt; CREATE INDEX &lt;TAB&gt; // show autocomplete hints\nPlease input: index name\n</code></pre> <p></p> <p>Goto Top</p>"},{"location":"backup/reference/crossline/#keyboard-debug","title":"Keyboard Debug","text":"<p>Enter keyboard debug mode</p> <p>Press <code>Ctrl-^</code> to enter keyboard debug mode, then you can type any key or composite key, and the code sequence will be displaced. This can be used to discover new key code sequences or debug especially for Linux system with different terminals. Note: For Windows, <code>Alt</code> key is a state, so it's not displayed.</p> <p>Exit keyboard debug mode</p> <p>Press <code>Ctrl-C</code> to exit.</p> <p>Example</p> <pre><code>SQL&gt; &lt;Ctrl-^&gt;\nEnter keyboard debug mode, &lt;Ctrl-C&gt; to exit debug\n 27 0x1b ( )\n 91 0x5b ([)\n 65 0x41 (A)\n 31 0x1f ( )\n 27 0x1b ( )\n 91 0x5b ([)\n 72 0x48 (H)\n</code></pre>"},{"location":"backup/reference/crossline/#embedded-help","title":"Embedded Help","text":"<p>Edit mode</p> <pre><code>SQL&gt; &lt;F1&gt;\n Misc Commands\n +-------------------------+--------------------------------------------------+\n | F1                      |  Show edit shortcuts help.                       |\n | Ctrl-^                  |  Enter keyboard debugging mode.                  |\n +-------------------------+--------------------------------------------------+\n Move Commands\n +-------------------------+--------------------------------------------------+\n | Ctrl-B, Left            |  Move back a character.                          |\n | Ctrl-F, Right           |  Move forward a character.                       |\n | Up, ESC+Up              |  Move cursor to up line. (For multiple lines)    |\n |   Ctrl-Up, Alt-Up       |  (Ctrl-Up, Alt-Up only supports Windows/Xterm)   |\n | Down, ESC+Down          |  Move cursor to down line. (For multiple lines)  |\n |   Ctrl-Down,Alt-Down    |  (Ctrl-Down, Alt-Down only support Windows/Xterm)|\n | Alt-B, ESC+Left,        |  Move back a word.                               |\n |   Ctrl-Left, Alt-Left   |  (Ctrl-Left, Alt-Left only support Windows/Xterm)|\n*** Press &lt;Space&gt; or &lt;Enter&gt; to continue . . .\n</code></pre> <p>Search mode</p> <pre><code>SQL&gt; &lt;F4&gt; or &lt;Ctrl+R&gt;\nInput Patterns &lt;F1&gt; help: &lt;F1&gt;\nPatterns are separated by ' ', patter match is case insensitive:\n    select:   choose line including 'select'\n    -select:  choose line excluding 'select'\n    \"select from\":  choose line including \"select from\"\n    -\"select from\": choose line excluding \"select from\"\nExample:\n    \"select from\" where -\"order by\" -limit:\n         choose line including \"select from\" and 'where'\n         and excluding \"order by\" or 'limit'\n</code></pre>"},{"location":"backup/reference/crossline/#extend-crossline","title":"Extend Crossline","text":"<p>You can extend crossline to add new shortcuts and action easily.</p> <p>Use keyboard debug mode to find the key code sequences</p> <ul> <li>For Windows, most key has only one code, some function key has 2, first is 224 or 0, then follows another code. <code>Alt</code> key in Windows is a state, please refer <code>crossline_getkey</code>.</li> <li>For Linux system, most function key has an escape sequences(up to 6), and one function key may have many different escape sequences for different terminal modes, so you need to test case by case.</li> </ul> <p>Define new key</p> <ul> <li>For <code>Ctrl-key</code>, most are single code, and you can use <code>CTRL_KEY(key)</code> directly. </li> <li>For windows, most <code>Alt-key</code> can use <code>ALT_KEY(num)</code>.</li> <li>For Linux, most <code>Alt</code> key is escape sequences, and you can use existing macro like <code>ESC_KEY6</code>, example: <code>KEY_ALT_LEFT    = ESC_KEY6('1','3','D'), // xterm Esc[1;3D: Move back a word.</code></li> </ul> <p>Support new Esc+key</p> <p>Please add the conversion in <code>crossline_key_esc2alt</code></p> <p>Map new key to existing action</p> <ul> <li>If it's a new different escape sequences for same key, please map the new key to main action key in <code>crossline_key_mapping</code>.</li> <li>If it's a new key, please add case to <code>crossline_readline_input</code>.</li> </ul> <p>Add new action</p> <p>Please add case and action code in <code>crossline_readline_input</code>. You can refer existing case of similar action to write your new action. Use <code>crossline_refreash</code> to print line after updating buf.</p> <p>Debug your code</p> <p>It's not easy to debug with print or debugger tools like GDB for terminal tools, and you can use <code>crossline_debug(\"xxx\",...)</code> to print debug information to file <code>crossline_debug.txt</code>.</p> <p>Goto Top</p>"},{"location":"backup/reference/crossline/#customized-config","title":"Customized Config","text":"<p>Word delimiters for move and cut</p> <p>Default is defined by <code>CROSS_DFT_DELIMITER</code>. <pre><code>#define CROSS_DFT_DELIMITER            \" !\\\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\"\n</code></pre> You can modify it or use <code>crossline_delimiter_set</code> to change it.</p> <p>History</p> <p>The history line len can be less than user buf len, and it'll cut to history line len when storing to history buf. <pre><code>#define CROSS_HISTORY_MAX_LINE       256         // Maximum history line number\n#define CROSS_HISTORY_BUF_LEN        4096        // History line length\n#define CROSS_HIS_MATCH_PAT_NUM      16          // History search pattern number\n</code></pre></p> <p>Completion <pre><code>#define CROSS_COMPLET_MAX_LINE        512        // Maximum completion word number\n#define CROSS_COMPLET_WORD_LEN        64         // Completion word length\n#define CROSS_COMPLET_HELP_LEN        256        // Completion word's help length\n#define CROSS_COMPLET_HINT_LEN        128        // Completion syntax hints length\n</code></pre></p>"},{"location":"backup/reference/crossline/#build-and-test","title":"Build and Test","text":"<p>On Windows, you can add the source code to a Visual Studio project to build or enter <code>Tools Command Prompt for VS</code> from menu to build in command line which is more efficient.</p> <p>Windows MSVC</p> <pre><code>cl -D_CRT_SECURE_NO_WARNINGS -W4 User32.Lib crossline.c example.c /Feexample.exe\ncl -D_CRT_SECURE_NO_WARNINGS -W4 User32.Lib crossline.c example2.c /Feexample2.exe\ncl -D_CRT_SECURE_NO_WARNINGS -W4 User32.Lib crossline.c example_sql.c /Feexample_sql.exe\n</code></pre> <p>Windows Clang</p> <pre><code>clang -D_CRT_SECURE_NO_WARNINGS -Wall -lUser32 crossline.c example.c -o example.exe\nclang -D_CRT_SECURE_NO_WARNINGS -Wall -lUser32 crossline.c example2.c -o example2.exe\nclang -D_CRT_SECURE_NO_WARNINGS -Wall -lUser32 crossline.c example_sql.c -o example_sql.exe\n</code></pre> <p>GCC(Linux, MinGW, Cygwin, MSYS2)</p> <pre><code>gcc -Wall crossline.c example.c -o example\ngcc -Wall crossline.c example2.c -o example2\ngcc -Wall crossline.c example_sql.c -o example_sql\n</code></pre> <p>Linux Clang</p> <pre><code>clang -Wall crossline.c example.c -o example\nclang -Wall crossline.c example2.c -o example2\nclang -Wall crossline.c example_sql.c -o example_sql\n</code></pre>"},{"location":"backup/reference/crossline/#related-projects","title":"Related Projects","text":"<ul> <li>Linenoise a small self-contained alternative to readline and libedit</li> <li>Linenoise-ng is a fork of Linenoise that aims to add more advanced features like UTF-8 support, Windows support and other features. Uses C++ instead of C as development language.</li> </ul> <p>Goto Top</p>"},{"location":"backup/reference/markdown/","title":"Markdown Cheat Sheet","text":"<p>Thanks for visiting The Markdown Guide!</p> <p>This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.</p>"},{"location":"backup/reference/markdown/#basic-syntax","title":"Basic Syntax","text":"<p>These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements.</p>"},{"location":"backup/reference/markdown/#heading","title":"Heading","text":""},{"location":"backup/reference/markdown/#h1","title":"H1","text":""},{"location":"backup/reference/markdown/#h2","title":"H2","text":""},{"location":"backup/reference/markdown/#h3","title":"H3","text":""},{"location":"backup/reference/markdown/#bold","title":"Bold","text":"<p>bold text</p>"},{"location":"backup/reference/markdown/#italic","title":"Italic","text":"<p>italicized text</p> <p>bold italicized text</p> <p>italicized text</p> <p>italicized text</p>"},{"location":"backup/reference/markdown/#line-breaks","title":"Line Breaks","text":"<p>First line with two spaces after. And the next line.</p> <p>First line with the HTML tag after. And the next line.</p>"},{"location":"backup/reference/markdown/#blockquote","title":"Blockquote","text":"<p>blockquote</p>"},{"location":"backup/reference/markdown/#blockquotes-with-other-elements","title":"Blockquotes with Other Elements","text":""},{"location":"backup/reference/markdown/#the-quarterly-results-look-great","title":"The quarterly results look great!","text":"<ul> <li>Revenue was off the chart.</li> <li>Profits were higher than ever.</li> </ul> <p>Everything is going according to plan.</p>"},{"location":"backup/reference/markdown/#ordered-list","title":"Ordered List","text":"<ol> <li>First item</li> <li>Second item</li> <li>Third item<ol> <li>Indented item</li> <li>Indented item</li> </ol> </li> <li>Fourth item</li> </ol>"},{"location":"backup/reference/markdown/#unordered-list","title":"Unordered List","text":"<ul> <li>First item</li> <li>Second item</li> <li>Third item<ul> <li>Indented item</li> <li>Indented item</li> </ul> </li> <li>Fourth item</li> </ul> <p>Mix</p> <ol> <li>First item</li> <li>Second item</li> <li>Third item<ul> <li>Indented item</li> <li>Indented item</li> </ul> </li> <li> <p>Fourth item</p> </li> <li> <p>This is the first list item.</p> </li> <li> <p>Here's the second list item.</p> <p>I need to add another paragraph below the second list item.</p> <p>I need to add another paragraph below the second list item.</p> </li> <li> <p>And here's the third list item.</p> </li> </ol>"},{"location":"backup/reference/markdown/#code","title":"Code","text":"<p><code>code</code></p>"},{"location":"backup/reference/markdown/#horizontal-rule","title":"Horizontal Rule","text":""},{"location":"backup/reference/markdown/#link","title":"Link","text":"<p>Markdown Guide</p> <p>Link</p> <p>Link</p> <p>Markdown Guide2</p> <p>can't have tab</p>"},{"location":"backup/reference/markdown/#formatting-links","title":"Formatting Links","text":"<p>I love supporting the EFF. This is the Markdown Guide. See the section on <code>code</code>.  </p>"},{"location":"backup/reference/markdown/#urls-and-email-addresses","title":"URLs and Email Addresses","text":"<p>https://www.markdownguide.org fake@example.com</p>"},{"location":"backup/reference/markdown/#image","title":"Image","text":"<p>abs img</p> <p></p> <p>rel img </p> <p>Std img </p> <p> </p> Image caption <p>new fig</p> <p>gif</p> <p> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>image in left image in left image in left image in left image in left image in left image in left image in left  </p>"},{"location":"backup/reference/markdown/#escaping-characters","title":"Escaping Characters","text":"<p>* `</p>"},{"location":"backup/reference/markdown/#extended-syntax","title":"Extended Syntax","text":"<p>These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.</p>"},{"location":"backup/reference/markdown/#table","title":"Table","text":"Syntax Description Header Title Paragraph Text Syntax Description Test Text Header Title Here's this Paragraph Text And more Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"backup/reference/markdown/#fenced-code-block","title":"Fenced Code Block","text":"<pre><code>{\n\"firstName\": \"John\",\n\"lastName\": \"Smith\",\n\"age\": 25\n}\n</code></pre>"},{"location":"backup/reference/markdown/#footnote","title":"Footnote","text":"<p>Here's a sentence with a footnote. 1</p> <p>Here's a sentence with a footnote. 1</p>"},{"location":"backup/reference/markdown/#heading-id","title":"Heading ID","text":""},{"location":"backup/reference/markdown/#custom-id","title":"My Great Heading","text":""},{"location":"backup/reference/markdown/#definition-list","title":"Definition List","text":"First Term This is the definition of the first term. Second Term This is one definition of the second term. This is another definition of the second term."},{"location":"backup/reference/markdown/#strikethrough","title":"Strikethrough","text":"<p>The world is flat.</p>"},{"location":"backup/reference/markdown/#task-list","title":"Task List","text":"<ul> <li> Write the press release</li> <li> Update the website</li> <li> Contact the media</li> </ul>"},{"location":"backup/reference/markdown/#emoji","title":"Emoji","text":"<p>\u2764\ufe0f That is so funny! </p> <p>(See also Copying and Pasting Emoji)</p>"},{"location":"backup/reference/markdown/#highlight","title":"Highlight","text":"<p>I need to highlight these very important words.</p>"},{"location":"backup/reference/markdown/#subscript","title":"Subscript","text":"<p>H2O</p>"},{"location":"backup/reference/markdown/#superscript","title":"Superscript","text":"<p>X2</p>"},{"location":"backup/reference/markdown/#automatic-url-linking","title":"Automatic URL Linking","text":"<p>http://www.example.com</p> <p><code>http://www.example.com</code></p>"},{"location":"backup/reference/markdown/#admonition","title":"Admonition","text":"<p>I'm Note</p> <p>Some text here</p> <p>Addtional Content</p> <p>I'm Warning</p> <p>Some text here</p> <p>Addtional Content</p> <p>The End</p> <ol> <li> <p>This is the footnote.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"blog/why-new-embdb/","title":"Why Need a New Embedded Database","text":"<p>TBD</p>"},{"location":"docs/get-started/","title":"Get Started","text":""},{"location":"docs/get-started/#download","title":"Download","text":"<p>Choose the OS and CPU, then Download here.</p> <p>Linux package file list</p> File Descritpion crossdb.h The only header file libcrossdb.so The only shared library examples/ CrossDB example code <p>Windows package file list</p> File Descritpion crossdb.h The only header file crossdb.dll The only shared library crossdb.lib For build with MSCV compiler examples/ CrossDB example code <p>MacOS package file list</p> File Descritpion crossdb.h The only header file libcrossdb.dylib The only shared library for X64 and AMD64 examples/ CrossDB example code"},{"location":"docs/get-started/#linux","title":"Linux","text":""},{"location":"docs/get-started/#run-examples","title":"Run Examples","text":"<pre><code>cd examples\n\n./build.sh example.c\n./example.bin\n\n./build.sh tutorial.c\n./tutorial.bin\n</code></pre>"},{"location":"docs/get-started/#build-in-your-project","title":"Build in your project","text":"<ul> <li> <p>You can check examples/build.sh to build the library in your project folder.</p> </li> <li> <p>Yo can also install CrossDB globally and use it as common library.</p> <p>1. Install <code>libcrossdb.so</code> to <code>/usr/lib</code></p> <pre><code>#include \"crossdb.h\"\n// your code\n</code></pre> <p>2. Build this way: <code>gcc my.c -lcrossdb -pthread -ldl</code></p> </li> </ul>"},{"location":"docs/get-started/#windows","title":"Windows","text":""},{"location":"docs/get-started/#run-examples-with-msvc","title":"Run Examples with MSVC","text":"<p>Start <code>Visual Studio</code> command line from menu <code>x64 Native Tools Command Prompt for VS 20xx</code></p> <p>Enter CrossDB package folder</p> <pre><code>cd examples\n\nbuild example.c\nexample.exe\n\nbuild tutorial.c\ntutorial.exe\n</code></pre>"},{"location":"docs/get-started/#run-examples-with-mingw64","title":"Run Examples with MINGW64","text":"<pre><code>cd examples\n\n./build.sh example.c\n./example.bin\n\n./build.sh tutorial.c\n./tutorial.bin\n</code></pre> <p>Note</p> <p>You can run in <code>git bash</code> or <code>MSYS2 MINGW64</code> If you only have MINGW64, you an run in commandline</p> <p><code>gcc -o example.exe -Wall -O2 example.c -I.. crossdb.dll</code></p>"},{"location":"docs/get-started/#build-in-your-project_1","title":"Build in your project","text":"<ul> <li>For <code>MINGW64</code>, you can just use <code>crossdb.h</code> and <code>crossdb.dll</code> to compile.</li> <li>For <code>Visual Studio</code>, You can add <code>crossdb.h</code> <code>crossdb.lib</code> and <code>crossdb.dll</code> to your project.</li> </ul>"},{"location":"docs/get-started/#macos","title":"MacOS","text":""},{"location":"docs/get-started/#run-examples_1","title":"Run Examples","text":"<pre><code>cd examples\n\n./build.sh example.c\n./example.bin\n\n./build.sh tutorial.c\n./tutorial.bin\n</code></pre>"},{"location":"docs/get-started/#build-in-your-project_2","title":"Build in your project","text":"<ul> <li> <p>You can check examples/build.sh to build the library in your project folder.</p> </li> <li> <p>Yo can also install CrossDB globally and use it as common library.</p> <p>1. Install <code>libcrossdb.dylib</code> to <code>/usr/local/lib</code></p> <pre><code>#include \"crossdb.h\"\n// your code\n</code></pre> <p>2. Build this way: <code>clang my.c -lcrossdb</code></p> </li> </ul>"},{"location":"docs/introduction/","title":"Introduction","text":"<p>CrossDB is a powerful high-performance embedded RDBMS database. It's developed to  improve development efficiency for embedded application or embedded system development. </p>"},{"location":"docs/introduction/#features","title":"Features","text":"<ul> <li>Support Multiple OS Platform: Linux/Windows/MacOS etc</li> <li>Support X86/ARM/PPC/MIPS etc CPU</li> <li>Support OnDisk/In-memory/RamDisk Storage</li> <li>Support Primary Key and multiple Secondary Index</li> <li>Support HASH and RBTREE Index</li> <li>Support Multi-columns Index</li> <li>Support Exact Match, Leftmost Match, Range Match</li> <li>Support C/C++ Struct/Union ORM APIs</li> <li>Support Struct Scheme Auto upgrade/downgrade</li> <li>Support almost all C data types</li> <li>Support rich DEC/HEX/BIN/Bitmap/MAC/IPv4/IPv6/Timestamp formats</li> <li>Support Standard Transaction (begin/commit/rollback)</li> <li>Support WAL for OnDisk storage</li> <li>Dynamic Growing/Shrinking Table</li> <li>Support Multiple Threads and Multiple Processes Access</li> <li>Support Table level read/write lock</li> <li>Super High Performance</li> <li>Very Robust: Process Restart, Process Crash, Power Cycle</li> <li>Very Simple: Simple header and library file</li> <li>Zero Config: no complex config, real out-of-the-box</li> </ul>"},{"location":"docs/introduction/#use-cases","title":"Use Cases","text":"<ul> <li>You can use CrossDB RDBMS to Manage Program Runtime Data efficiently.</li> <li>You can use CrossDB transaction to do persistency storage on Disk/Flash with ACID feature.</li> <li>YOu can use CrossDB to support Process Restartability, In-Service Software Upgrade(ISSU) easily.</li> <li>You can use CrossDB RDBMS to refactor your code conveniently.</li> <li>You can use CrossDB Index to optimize performance without changing your code.</li> </ul>"},{"location":"docs/api/api/","title":"API List","text":""},{"location":"docs/api/api/#database-definition-apis","title":"Database Definition APIs","text":"API Descritpion cross_ret cross_dbCreate (cross_db_h *phDb, const char *dbName, uint32_t flags) Create or Open Database cross_ret cross_dbClose (cross_db_h hDb, uint32_t flags) Close Database cross_ret cross_dbDrop (cross_db_h hDb, uint32_t flags) Drop Database cross_ret cross_dbTblCreate (cross_db_h hDb, cross_tbl_h *phTbl, const char *tblName, const cross_field_t *pFields, const char *priKey, uint32_t flags) Create or Open Table cross_ret cross_dbTblDrop (cross_tbl_h hTbl, uint32_t flags) Drop Table cross_ret cross_dbIdxCreate (cross_tbl_h hTbl, const char *idxName, const char *fldsStr, uint32_t flags) Create Index on Table cross_ret cross_dbIdxDrop (cross_tbl_h hTbl, const char *idxName, uint32_t flags) Drop Table Index"},{"location":"docs/api/api/#database-manipulation-apis","title":"Database Manipulation APIs","text":"API Descritpion cross_ret cross_dbInsertRow (cross_tbl_h hTbl, void *pRow, uint32_t flags) Intert row into Table cross_ret cross_dbReplaceRow (cross_tbl_h hTbl, void *pInRow, uint32_t flags) Insert/update row cross_ret cross_dbGetRowByPK (cross_tbl_h hTbl, const void *pInRow, void *pOutRow, uint32_t flags) Get one row by Primary Key cross_ret cross_dbUpdRowByPK (cross_tbl_h hTbl, const void *pInRow, const void *pUpdFlds, void *pUpdRow, uint32_t flags) Update row by Primary Key cross_ret cross_dbDelRowByPK (cross_tbl_h hTbl, void *pInRow, uint32_t flags) Delete row by Primary Key cross_ret cross_dbGetOneRow (cross_tbl_h hTbl, const void *pMatFlds, const void *pMatRow, void *pOutRow, uint32_t flags) Get one row by match fields cross_rowid cross_dbUpdateRows (cross_tbl_h hTbl, const void *pMatFlds, const void *pMatRow, const void *pUpdFlds, const void *pUpdRow, uint32_t flags) Update rows by match fields cross_rowid cross_dbDeleteRows (cross_tbl_h hTbl, const void *pMatFlds, const void *pMatRow, uint32_t flags) Delete rows by match fields cross_rowid cross_dbGetRowsCount (cross_tbl_h hTbl, const void *pMatFlds, const void *pMatRow, uint32_t flags) Get rows count by match fields cross_rowid cross_dbQueryRows (cross_tbl_h hTbl, cross_cursor_h *phCursor, const void *pMatFlds, const void *pMatRow, uint32_t flags) Query rows into cursor cross_ret cross_cursorGetNextRow (cross_cursor_h hCursor, void *pOutRow, uint32_t flags) Get next row in cursor cross_rowid cross_cursorGetCount (cross_cursor_h hCursor, uint32_t flags) Get cursor rows count cross_ret cross_cursorClose (cross_cursor_h hCursor, uint32_t flags) Close cursor cross_ret cross_dbTransBegin (cross_db_h hDb, uint32_t flags) Begin Transaction cross_ret cross_dbTransCommit (cross_db_h hDb, uint32_t flags) Commit Transaction cross_ret cross_dbTransRollback (cross_db_h hDb, uint32_t flags) Rollback Transaction"},{"location":"docs/api/api/#misc-apis","title":"Misc APIs","text":"API Descritpion const char* cross_errMsg (cross_db_h hDb, uint32_t flags) Return error code message"},{"location":"docs/api/ddl/","title":"Database Definition APIs","text":""},{"location":"docs/api/ddl/#database","title":"Database","text":""},{"location":"docs/api/ddl/#cross_dbCreate","title":"cross_dbCreate","text":"<p>Create or Open Database <pre><code>cross_ret cross_dbCreate (cross_db_h *phDb, const char *dbName, uint32_t flags);\n</code></pre> Parameters</p> Arg Type Descritpion phDb out DB Handle dbName in DB Name(can with Path) flags [in] See following tables Flag Descritpion CROSS_ONDISK DB is on persistent disk, survive with power cycle (Default) CROSS_RAMDISK DB is on ramdisk/tmpfs/ramfs, survive with process restart, lose after power cycle CROSS_INMEM DB is in memory, survie when process is runnig, lose after process terminates CROSS_EXCLUSIVE DB is used exclusively by single process (Default) CROSS_SHARED DB is shared by multiple processes CROSS_AUTOLOCK DB will do lock automatically (Default) CROSS_OPEN Open DB (don't create if not exist) <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   The database was created/opened successfully</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul>"},{"location":"docs/api/ddl/#cross_dbClose","title":"cross_dbClose","text":"<p>Close Database <pre><code>cross_ret cross_dbClose (cross_db_h hDb, uint32_t flags);\n</code></pre> Parameters</p> Arg Type Descritpion hDb in DB Handle flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   The database was closed successfully</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul> <p>Warning</p> <p>DB handle can't be used after close.</p>"},{"location":"docs/api/ddl/#cross_dbDrop","title":"cross_dbDrop","text":"<p>Drop Database <pre><code>cross_ret cross_dbDrop (cross_db_h hDb, uint32_t flags);\n</code></pre> Parameters</p> Arg Type Descritpion hDb in DB Handle flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   The database was dropped successfully</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul> <p>Warning</p> <p>All tables and indexes will be removed. DB handle can't be used after drop.</p>"},{"location":"docs/api/ddl/#table","title":"Table","text":""},{"location":"docs/api/ddl/#cross_dbTblCreate","title":"cross_dbTblCreate","text":"<p>Create or Open Table <pre><code>cross_ret cross_dbTblCreate (cross_db_h hDb, cross_tbl_h *phTbl, const char *tblName,\nconst cross_field_t *pFields, const char *priKey, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hDb in DB Handle phDb out Table Handle tblName in Table Name pFields [in] Table Schema Fields priKey [in] Primary Key cloumn list seperated by <code>,</code> flags [in] See following tables Flag Descritpion CROSS_RBTREE Primary Key is RBTREE CROSS_OPEN Open DB (don't create if not exist) <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   The table was created/opened successfully</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul>"},{"location":"docs/api/ddl/#cross_dbTblDrop","title":"cross_dbTblDrop","text":"<p>Drop Table <pre><code>cross_ret cross_dbTblDrop (cross_tbl_h hTbl, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hTbl in Table Handle flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   The table was dropped successfully</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul> <p>Warning</p> <p>Table handle can't be used after drop.</p>"},{"location":"docs/api/ddl/#index","title":"Index","text":""},{"location":"docs/api/ddl/#cross_dbIdxCreate","title":"cross_dbIdxCreate","text":"<p>Create Index on Table <pre><code>cross_ret cross_dbIdxCreate (cross_tbl_h hTbl, const char *idxName, const char *fldsStr, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hTbl in Table Handle idxName in index name(table scope) fldsStr in cloumn list seperated by <code>,</code> flags [in] See following tables Flag Descritpion CROSS_HASH index type HASH (default) CROSS_RBTREE index type RBTREE CROSS_UNIQUE index is Unique <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   The index was created successfully</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul>"},{"location":"docs/api/ddl/#cross_dbIdxDrop","title":"cross_dbIdxDrop","text":"<p>Drop Table Index <pre><code>cross_ret cross_dbIdxDrop (cross_tbl_h hTbl, const char *idxName, uint32_t flags);\n</code></pre> Parameters</p> Arg Type Descritpion hTbl in Table Handle idxName in index name(table scope) flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   The index was dropped successfully</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul>"},{"location":"docs/api/dml/","title":"Database Manipulation APIs","text":""},{"location":"docs/api/dml/#single-row-manipulation","title":"Single Row Manipulation","text":""},{"location":"docs/api/dml/#cross_dbInsertRow","title":"cross_dbInsertRow","text":"<p>Intert row to Table <pre><code>cross_ret cross_dbInsertRow (cross_tbl_h hTbl, void *pRow, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hTbl in Table Handle pRow in Row buffer to insert pValFlds [in] Not used flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   The row was inserted successfully</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul> <p>Description</p> <ul> <li>If table has Primary Key or unique index, it must be valid and unique.</li> </ul>"},{"location":"docs/api/dml/#cross_dbReplaceRow","title":"cross_dbReplaceRow","text":"<p>Insert row to Table if not exist else replace row <pre><code>cross_ret cross_dbReplaceRow (cross_tbl_h hTbl, void *pInRow, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hTbl in Table Handle pRow in Row buffer to insert/update pNullFlds in Not used flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   The row was inserted/updated successfully</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul> <p>Description</p> <ul> <li>If table has Primary Key or unique index, it must be valid and unique.</li> </ul>"},{"location":"docs/api/dml/#cross_dbGetRowByPK","title":"cross_dbGetRowByPK","text":"<p>Get one row by Primary Key <pre><code>cross_ret cross_dbGetRowByPK (cross_tbl_h hTbl, const void *pInRow, void *pOutRow, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hTbl in Table Handle pInRow in Row buffer with Primary Key pSelFlds [in] Select specified fields pOutRow [out] Row buffer to return DB row flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   Get row successfully</li> <li><code>CROSS_E_NOTFOUND</code>: The row is not found</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul> <p>Description</p> <ul> <li><code>pSelFlds</code> can be cloumn list seperated by <code>,</code>,</li> <li><code>pSelFlds</code> = <code>NULL</code> returns whole row</li> <li><code>pOutRow</code> = NULL can be used to check if row exists by Primary Key</li> <li><code>pOutRow</code> can = <code>pInRow</code></li> </ul>"},{"location":"docs/api/dml/#cross_dbUpdRowByPK","title":"cross_dbUpdRowByPK","text":"<p>Update row by Primary Key <pre><code>cross_ret cross_dbUpdRowByPK (cross_tbl_h hTbl, const void *pInRow, const void *pUpdFlds, void *pUpdRow, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hTbl in Table Handle pInRow in Row buffer with Primary Key pUpdFlds [in] Fields to update pUpdRow in Row buffer to upate flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   Update row successfully</li> <li><code>CROSS_E_NOTFOUND</code>: The row is not found</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul> <p>Description</p> <ul> <li><code>pUpdFlds</code> can be cloumn list seperated by <code>,</code></li> <li><code>pUpdFlds</code> = NULL will update whole DB row</li> <li><code>pUpdRow</code> can = <code>pInRow</code></li> </ul>"},{"location":"docs/api/dml/#cross_dbDelRowByPK","title":"cross_dbDelRowByPK","text":"<p>Delete row by Primary Key <pre><code>cross_ret cross_dbDelRowByPK (cross_tbl_h hTbl, void *pInRow, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hTbl in Table Handle pInRow in Row buffer with Primary Key flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   Delete row successfully</li> <li><code>CROSS_E_NOTFOUND</code>: No row is found</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul>"},{"location":"docs/api/dml/#cross_dbGetOneRow","title":"cross_dbGetOneRow","text":"<p>Get one row by match fields <pre><code>cross_ret cross_dbGetOneRow (cross_tbl_h hTbl, const void *pMatFlds, const void *pMatRow, void *pOutRow, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hTbl in Table Handle pMatFlds in Fields to match pMatRow in Row buffer with match row pSelFlds [in] Select specified fields pOutRow [out] Row buffer to return DB row flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   Get row successfully</li> <li><code>CROSS_E_NOTFOUND</code>: No row is found</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul> <p>Description</p> <ul> <li><code>pMatFlds</code> can be cloumn list seperated by <code>,</code>, they are <code>AND</code> together. <ul> <li><code>fld</code>: equal to match <code>dbRow.fld</code> = <code>pMatRow.fld</code>.</li> <li><code>fld!=</code>: unequal match <code>dbRow.fld</code> != <code>pMatRow.fld</code>.</li> <li><code>fld&gt;</code>: greater than match <code>dbRow.fld</code> &gt; <code>pMatRow.fld</code>.</li> <li><code>fld&gt;=</code>: greater than or equal to match <code>dbRow.fld</code> &gt;= <code>pMatRow.fld</code>.</li> <li><code>fld&lt;</code>: less match <code>dbRow.fld</code> &lt; <code>pMatRow.fld</code>.</li> <li><code>fld&lt;=</code>: leas than or equal to match <code>dbRow.fld</code> &lt; <code>pMatRow.fld</code>.</li> </ul> </li> <li><code>pSelFlds</code> can be cloumn list seperated by <code>,</code>,</li> <li><code>pSelFlds</code> = <code>NULL</code> returns whole row</li> <li><code>pOutRow</code> = NULL can be used to check if row exists</li> </ul>"},{"location":"docs/api/dml/#multiple-rows-manipulation","title":"Multiple Rows Manipulation","text":""},{"location":"docs/api/dml/#cross_dbUpdateRows","title":"cross_dbUpdateRows","text":"<p>Update rows by match fields <pre><code>cross_rowid cross_dbUpdateRows (cross_tbl_h hTbl, const void *pMatFlds, const void *pMatRow, const void *pUpdFlds, const void *pUpdRow, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hTbl in Table Handle pMatFlds in Fields to match pMatRow in Row buffer with match row pUpdFlds [in] Upate specified fields pUpdRow in Row buffer to update flags [in] Not used <p>Returns</p> <ul> <li><code>&gt;=0</code>:    Rows count updated successfully</li> <li><code>Other</code>:  Decode with cross_errMsg</li> </ul> <p>Description</p> <ul> <li><code>pMatFlds</code> can be cloumn list seperated by <code>,</code>, they are <code>AND</code> together.  Refer cross_dbGetOneRow</li> <li><code>pUpdFlds</code> can be cloumn list seperated by <code>,</code>,</li> <li><code>pUpdFlds</code> = <code>NULL</code> updates whole row</li> </ul>"},{"location":"docs/api/dml/#cross_dbDeleteRows","title":"cross_dbDeleteRows","text":"<p>Delete rows by match fields <pre><code>cross_rowid cross_dbDeleteRows (cross_tbl_h hTbl, const void *pMatFlds, const void *pMatRow, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hTbl in Table Handle pMatFlds in Fields to match pMatRow in Row buffer with match row flags [in] Not used <p>Returns</p> <ul> <li><code>&gt;=0</code>:    Rows count deleted successfully</li> <li><code>Other</code>:  Decode with cross_errMsg</li> </ul> <p>Description - <code>pMatFlds</code> can be cloumn list seperated by <code>,</code>, they are <code>AND</code> together.  Refer cross_dbGetOneRow</p>"},{"location":"docs/api/dml/#cross_dbGetRowsCount","title":"cross_dbGetRowsCount","text":"<p>Get rows count by match fields <pre><code>cross_rowid cross_dbGetRowsCount (cross_tbl_h hTbl, const void *pMatFlds, const void *pMatRow, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hTbl in Table Handle pMatFlds in Fields to match pMatRow in Row buffer with match row flags [in] Not used <p>Returns</p> <ul> <li><code>&gt;=0</code>:    Rows count</li> <li><code>Other</code>:  Decode with cross_errMsg</li> </ul> <p>Description - <code>pMatFlds</code> can be cloumn list seperated by <code>,</code>, they are <code>AND</code> together.  Refer cross_dbGetOneRow</p>"},{"location":"docs/api/dml/#cursor","title":"Cursor","text":""},{"location":"docs/api/dml/#cross_dbQueryRows","title":"cross_dbQueryRows","text":"<p>Query rows into cursor <pre><code>cross_rowid cross_dbQueryRows (cross_tbl_h hTbl, cross_cursor_h *phCursor, const void *pMatFlds, const void *pMatRow, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hTbl in Table Handle phCursor io|out Return Cursor handle or pMatFlds in Fields to match pMatRow in Row buffer with match row pSelFlds [in] Select specified fields flags [in] <code>CROSS_REUSE</code> means phCursor points to a valid cursor handle and it'll be reused <p>Returns</p> <ul> <li><code>&gt;=0</code>:    Rows count</li> <li><code>Other</code>:  Decode with cross_errMsg</li> </ul> <p>Description</p> <ul> <li><code>pMatFlds</code> can be cloumn list seperated by <code>,</code>, they are <code>AND</code> together.  Refer cross_dbGetOneRow</li> <li><code>pSelFlds</code> can be cloumn list seperated by <code>,</code>,</li> <li><code>pSelFlds</code> = <code>NULL</code> returns whole row</li> </ul>"},{"location":"docs/api/dml/#cross_cursorGetNextRow","title":"cross_cursorGetNextRow","text":"<p>Get next row in cursor <pre><code>cross_ret cross_cursorGetNextRow (cross_cursor_h hCursor, void *pOutRow, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hCursor in Cursor Handle pInRow in Row buffer with Primary Key pSelFlds [in] Select specified fields pOutRow [out] Row buffer to return DB row flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   Get next row successfully</li> <li><code>CROSS_E_NOTFOUND</code>: No row is found</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul>"},{"location":"docs/api/dml/#cross_cursorgetcount","title":"cross_cursorGetCount","text":"<p>Get cursor rows count <pre><code>cross_rowid cross_cursorGetCount (cross_cursor_h hCursor, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hCursor in Cursor Handle flags [in] Not used <p>Returns</p> <ul> <li><code>&gt;=0</code>:    Rows count</li> <li><code>Other</code>:  Decode with cross_errMsg</li> </ul>"},{"location":"docs/api/dml/#cross_cursorClose","title":"cross_cursorClose","text":"<p>Close cursor <pre><code>cross_ret cross_cursorClose (cross_cursor_h hCursor, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hCursor in Cursor Handle flags [in] Not used <p>Returns</p> <ul> <li><code>&gt;=0</code>:    Rows count</li> <li><code>Other</code>:  Decode with cross_errMsg</li> </ul> <p>Warning</p> <p>Cursor handle can't be used after close.</p>"},{"location":"docs/api/dml/#transaction","title":"Transaction","text":""},{"location":"docs/api/dml/#cross_dbTransBegin","title":"cross_dbTransBegin","text":"<p>Begin Transaction <pre><code>cross_ret cross_dbTransBegin (cross_db_h hDb, uint32_t flags);\n</code></pre> Parameters</p> Arg Type Descritpion hDb in DB Handle flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   Begin transaction successfully</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul> <p>Note</p> <p>If there's onging transaction, it'll be commited first.</p>"},{"location":"docs/api/dml/#cross_dbTransCommit","title":"cross_dbTransCommit","text":"<p>Commit Transaction <pre><code>cross_ret cross_dbTransCommit (cross_db_h hDb, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hDb in DB Handle flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   Commit transaction successfully</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul>"},{"location":"docs/api/dml/#cross_dbTransRollback","title":"cross_dbTransRollback","text":"<p>Rollback Transaction <pre><code>cross_ret cross_dbTransRollback (cross_db_h hDb, uint32_t flags);\n</code></pre></p> <p>Parameters</p> Arg Type Descritpion hDb in DB Handle flags [in] Not used <p>Returns</p> <ul> <li><code>CROSS_OK</code>:   Rollback transaction successfully</li> <li><code>Other</code>:      Decode with cross_errMsg</li> </ul>"},{"location":"docs/api/misc/","title":"Misc APIs","text":""},{"location":"docs/api/misc/#cross_errMsg","title":"cross_errMsg","text":"<p>Return error code message <pre><code>const char*\ncross_errMsg (cross_ret ret);\n</code></pre></p>"},{"location":"docs/crossdb/database/","title":"Database","text":"<p>CrosDB Database is a collection of tables.</p> <p>Steps to define a database</p> <ul> <li>Decide where to store the database: on disk, on ramdisk or in memory.</li> <li>Decide the database is accessed by single process or multiple proceses.</li> <li>Use cross_dbCreate to create or open database.</li> <li>Use Schema to define table scheam.</li> <li>Decide Table Primary Key: fields list, index type.</li> <li>Use cross_dbTblCreate to create or open table with schema defined above and provide the primary key.</li> <li>Decide how many secondary indexes: fields list, index type, whether unique.</li> <li>Use cross_dbIdxCreate to create table secondary index.</li> </ul>"},{"location":"docs/crossdb/database/#storage-mode","title":"Storage Mode","text":"<p>On-Disk Database</p> <ul> <li>Database is on persistent disk, survive with power cycle. </li> <li>If you have data persistency requirements, please use this type. The performance is ver high. </li> <li>You need use transaction to guarantee data integrity even power cycle happened. </li> </ul> <p>RamDisk Database</p> <ul> <li>Database is on <code>ramdisk</code> <code>tmpfs</code> <code>ramfs</code>(<code>CROSS_RAMDISK</code>), survive with process restart, lose after power cycle. </li> <li>This is designed for process runtime databse and the transaction performance is higher than On-Disk database. </li> <li>The performance is almost the same with In-Memory database. </li> <li>For Linux embedded system, this is the prefered database as the database can be viewed and stayed there even process crashed.</li> </ul> <p>In-Memory Database</p> <ul> <li>Database is in memory(<code>CROSS_INMEM</code>), survie when process is runnig, lose after process terminates. </li> <li>This is not recommented, but if you don't want the process runtime database visible, it's the solution.</li> </ul>"},{"location":"docs/crossdb/database/#access-mode","title":"Access Mode","text":"<p>Exclusive</p> <ul> <li>Database is accessed exclusively by single process with best performance.</li> </ul> <p>Shared</p> <ul> <li>Databse is accessd by multiple process(<code>CROSS_SHARED</code>), then performance will be low as file lock is used to access DB which can recover lock when process crashed.</li> </ul> <p>Note</p> <p>Database is accessed exclusively by default.</p>"},{"location":"docs/crossdb/database/#guide","title":"Guide","text":"<ul> <li>Database is stored on disk by default.</li> <li>If path(absoulte or relative) is not provided, DB is stored in current folder.</li> </ul>"},{"location":"docs/crossdb/database/#example","title":"Example","text":"<pre><code>#define CHECK(ret,str)  \\\n    if (ret &lt; 0) {  printf (str\": %s\\n\", cross_errMsg(ret)); return -1; }\ncross_ret       ret;\ncross_db_h      hDb;\n// Create on disk database in current folder for single process access\nret = cross_dbCreate (&amp;hDb, \"ondiskdb\", 0);\nCHECK (ret, \"Failed to create database\");\n// Create on disk database for multiple process access\nret = cross_dbCreate (&amp;hDb, \"cdb_data/shareddb\", CROSS_SHARED);\nCHECK (ret, \"Failed to create database\");\n// Create ramdisk database for single process access\nret = cross_dbCreate (&amp;hDb, \"/tmp/cdb_data/mydb\", CROSS_RAMDISK);\nCHECK (ret, \"Failed to create database\");\n// Create in memory database\nret = cross_dbCreate (&amp;hDb, \"imdb\", CROSS_INMEM);\nCHECK (ret, \"Failed to create database\");\n</code></pre>"},{"location":"docs/crossdb/dml/","title":"Data Manipulation Guide","text":""},{"location":"docs/crossdb/dml/#define-database","title":"Define Database","text":""},{"location":"docs/crossdb/dml/#handle-and-macros","title":"Handle and Macros","text":"<pre><code>cross_db_h      hDb;\ncross_tbl_h     hRtTbl;\ncross_ret       ret;\nroute_t         route;  cross_rowid     count;\n#define CHECK(ret,str)      if (ret &lt; 0) {  printf (str\": %s\\n\", cross_errMsg(ret)); return -1; }\n#define EXPECT(val,exp,str) if (val != exp) {   printf (\"%s: %d != %d\\n\", str, val, exp); return -1; } \\\n                            else  { printf (\"%s: %d\\n\", str, val); }\n#define IP4ADDR(a,b,c,d)        (uint32_t)((a)&lt;&lt;24|(b)&lt;&lt;16|(c)&lt;&lt;8|(d))\n#define IP4STR(ip)              ip&gt;&gt;24,(ip&gt;&gt;16)&amp;0xff,(ip&gt;&gt;8)&amp;0xff,ip&amp;0xff\n#define DUMP_ROUTE(str, route)  printf (str\"%d.%d.%d.%d/%d-&gt;%d.%d.%d.%d intf: %s metric: %d flags: 0x%x\\n\",     \\\n                        IP4STR(route.prefix), route.mask, IP4STR(route.nexthop), route.intf, route.metric, route.flags);\n</code></pre>"},{"location":"docs/crossdb/dml/#define-schema","title":"Define Schema","text":"<pre><code>typedef struct {\nuint32_t            prefix;\nuint8_t             mask;\nuint32_t            nexthop;\nuint8_t             metric;\nchar                intf[16];\ntime_t              birth;\nuint32_t            flags;\n} route_t;\n#undef  CROSS_STRUCT_NAME\n#define CROSS_STRUCT_NAME   route_t\ncross_field_t   route_schema[] = {\nCROSS_FIELD (prefix,    UINT,   IPv4, 0),\nCROSS_FIELD (mask,      UINT,   DFT,  0),\nCROSS_FIELD (nexthop,   UINT,   IPv4, 0),\nCROSS_FIELD (metric,    UINT,   DFT,  0),\nCROSS_FIELD (intf,      CHAR,   DFT,  0),\nCROSS_FIELD (birth,     UINT,   TS,   0),\nCROSS_FIELD (flags,     UINT,   HEX,  0),\nCROSS_END (route_t)\n};\n</code></pre>"},{"location":"docs/crossdb/dml/#create-db","title":"Create DB","text":"<pre><code>printf (\"\\n============ Create DB &amp; Table ============\\n\");\nprintf (\"  Create database : tutorial\\n\");\nret = cross_dbCreate (&amp;hDb, \"db_data/tutorial\", 0);\nCHECK (ret, \"Failed to create DB: tutorial\");\nprintf (\"  Create table: route (PrimaryKey: prefix,mask)\\n\");\nret = cross_dbTblCreate (hDb, &amp;hRtTbl, \"route\", route_schema, \"prefix,mask\", 0);\nCHECK (ret, \"Failed to create table: route\");\nprintf (\"  Create index on nexthop: idx_nexthop\\n\");\nret = cross_dbIdxCreate (hRtTbl, \"idx_nexthop\", \"nexthop\", 0);\nCHECK (ret, \"Failed to create index: idx_nexthop\");\n// Delete all rows\ncross_dbDeleteRows (hRtTbl, NULL, NULL, 0);\n</code></pre>"},{"location":"docs/crossdb/dml/#manipulation-database","title":"Manipulation Database","text":""},{"location":"docs/crossdb/dml/#insert-rows","title":"Insert Rows","text":"<pre><code>printf (\"\\n============ Insert Rows ============\\n\");\nprintf (\"  Insert route 192.168.1.0/24-&gt;192.168.1.254\\n\");\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   route.nexthop   = IP4ADDR(192,168,1,254);\nroute.metric    = 1;\nroute.flags     = 0;\nstrcpy (route.intf, \"eth1\");\nroute.birth     = time (NULL);\nret = cross_dbInsertRow (hRtTbl, &amp;route, 0); CHECK (ret, \"Failed to insert route 192.168.1.0/24\");\nprintf (\"  Insert route 10.1.1.0/24-&gt;10.1.2.254\\n\");\nroute.prefix    = IP4ADDR(10,1,1,0);\nroute.mask      = 24;   route.nexthop   = IP4ADDR(10,1,2,254);\nroute.metric    = 2;\nroute.flags     = 0;\nstrcpy (route.intf, \"eth2\");\nroute.birth     = time (NULL);\nret = cross_dbInsertRow (hRtTbl, &amp;route, 0); CHECK (ret, \"Failed to insert route 10.1.1.0/24\");\nprintf (\"  Use Replace to insert route 10.1.2.0/24-&gt;10.1.2.254\\n\");\nroute.prefix    = IP4ADDR(10,1,2,0);\nroute.mask      = 24;   route.nexthop   = IP4ADDR(10,1,2,254);\nroute.metric    = 1;\nroute.flags     = 0;\nstrcpy (route.intf, \"eth2\");\nroute.birth     = time (NULL);\nret = cross_dbReplaceRow (hRtTbl, &amp;route, 0); CHECK (ret, \"Failed to replace route 10.1.2.0/24\");\n</code></pre>"},{"location":"docs/crossdb/dml/#query-rows","title":"Query Rows","text":"<pre><code>printf (\"\\n============ Query Rows ============\\n\");\n// Get all rows count\ncount = cross_dbGetRowsCount (hRtTbl, NULL, NULL, 0);\nEXPECT (count, 3, \"  Total routes\");\n// Get rows count where nexthop=10.1.2.254\nroute.nexthop   = IP4ADDR(10,1,2,254);\ncount = cross_dbGetRowsCount (hRtTbl, \"nexthop\", &amp;route, 0);\nEXPECT (count, 2, \"  Nexthop=10.1.2.254 routes\");\n// Get single route 192.168.1.0/24 by PrimaryKey\nmemset (&amp;route, 0, sizeof(route));\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   ret = cross_dbGetRowByPK (hRtTbl, &amp;route, &amp;route, 0); CHECK (ret, \"Failed to get route 192.168.1.0/24 by PrimaryKey\");\nDUMP_ROUTE (\"  Get single route: \", route);\n// Get one row where nexthop=10.1.2.254\nmemset (&amp;route, 0, sizeof(route));  route.nexthop   = IP4ADDR(10,1,2,254);\nret = cross_dbGetOneRow (hRtTbl, \"nexthop\", &amp;route, &amp;route, 0);\nCHECK (ret, \"Failed to get one route where nexthop=10.1.2.254\");\nDUMP_ROUTE (\"  Get one route where nexthop=10.1.2.254: \", route);\n// Get one row where nexthop!=10.1.2.254\nmemset (&amp;route, 0, sizeof(route));  route.nexthop   = IP4ADDR(10,1,2,254);\nret = cross_dbGetOneRow (hRtTbl, \"nexthop!=\", &amp;route, &amp;route, 0);\nCHECK (ret, \"Failed to get one route where nexthop!=10.1.2.254\");\nDUMP_ROUTE (\"  Get one route where nexthop!=10.1.2.254: \", route);\n</code></pre>"},{"location":"docs/crossdb/dml/#update-rows","title":"Update Rows","text":"<pre><code>printf (\"\\n============ Update Rows ============\\n\");\nprintf (\"  Update single route 192.168.1.0/24 by Primary Key: set flags 0-&gt;1 metric 1-&gt;3\\n\");\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   route.metric    = 3;\nroute.flags     = 1;\nret = cross_dbUpdRowByPK (hRtTbl, &amp;route, \"flags,metric\", &amp;route, 0); CHECK (ret, \"Failed to update route 192.168.1.0/24 by Primary Key\");\n// verify\nroute.flags     = 0;\nret = cross_dbGetRowByPK (hRtTbl, &amp;route, &amp;route, 0);\nEXPECT (route.flags, 1, \"    Update flags\");\nEXPECT (route.metric, 3,   \"    Update metric\");\nDUMP_ROUTE (\"    Get single route: \", route);\nprintf (\"  Use Replace to Update single route 192.168.1.0/24 by Primary Key: set flags 1-&gt;2\\n\");\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   route.flags     = 2;\nret = cross_dbReplaceRow (hRtTbl, &amp;route, 0); CHECK (ret, \"Failed to replace route 192.168.1.0/24\");\n// verify\nroute.flags     = 0;\nret = cross_dbGetRowByPK (hRtTbl, &amp;route, &amp;route, 0);\nEXPECT (route.flags, 2, \"    Update flags\");\nDUMP_ROUTE (\"    Get single route: \", route);\n// Update routes where nexthop=10.1.2.254: set flags 0-&gt;3\nroute.nexthop   = IP4ADDR(10,1,2,254);\nroute.flags     = 3;\ncount = cross_dbUpdateRows (hRtTbl, \"nexthop\", &amp;route, \"flags\", &amp;route, 0);\nEXPECT (count, 2, \"  Update nexthop=10.1.2.254 set flags=3 rows\");\n// Update All routes set flags 0-&gt;3\nroute.nexthop   = IP4ADDR(10,1,2,254);\nroute.flags     = 4;\ncount = cross_dbUpdateRows (hRtTbl, NULL, NULL, \"flags\", &amp;route, 0);\nEXPECT (count, 3, \"  Update all routes set flags=4 rows\");\n</code></pre>"},{"location":"docs/crossdb/dml/#use-cursor","title":"Use Cursor","text":"<pre><code>printf (\"\\n============ Cursor Query ============\\n\");\n// Use cursor to get all routes\ncross_cursor_h hCursor;\ncount = cross_dbQueryRows (hRtTbl, &amp;hCursor, NULL, &amp;route, 0);\nEXPECT (count, 3, \"  Query All routes\");\nwhile (CROSS_OK == cross_cursorGetNextRow (hCursor, &amp;route, 0)) {\nDUMP_ROUTE (\"    route: \", route);\n}\n// Reuse cursor to get routes where nexthop=10.1.2.254\nroute.nexthop   = IP4ADDR(10,1,2,254);\ncount = cross_dbQueryRows (hRtTbl, &amp;hCursor, \"nexthop\", &amp;route, CROSS_REUSE);\nEXPECT (count, 2, \"  Query nexthop=10.1.2.254 routes\");\nwhile (CROSS_OK == cross_cursorGetNextRow (hCursor, &amp;route, 0)) {\nDUMP_ROUTE (\"    route: \", route);\n}\n// Reuse cursor to get routes where nexthop!=10.1.2.254\nroute.nexthop   = IP4ADDR(10,1,2,254);\ncount = cross_dbQueryRows (hRtTbl, &amp;hCursor, \"nexthop!=\", &amp;route, CROSS_REUSE);\nEXPECT (count, 1, \"  Query nexthop!=10.1.2.254 routes\");\nwhile (CROSS_OK == cross_cursorGetNextRow (hCursor, &amp;route, 0)) {\nDUMP_ROUTE (\"    route: \", route);\n}\ncross_cursorClose (hCursor, 0);\n</code></pre>"},{"location":"docs/crossdb/dml/#use-transaction","title":"Use Transaction","text":"<pre><code>printf (\"\\n============ Transaction ============\\n\");\nprintf (\"  Commit\\n\");\nret = cross_dbTransBegin (hDb, 0);\nCHECK (ret, \"Failed to begin transaction\");\nprintf (\"    Update single route 192.168.1.0/24 by Primary Key: set flags 0-&gt;5\\n\");\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   route.flags     = 5;\nret = cross_dbUpdRowByPK (hRtTbl, &amp;route, \"flags\", &amp;route, 0); CHECK (ret, \"Failed to update route 192.168.1.0/24 by Primary Key\");\nret = cross_dbTransCommit (hDb, 0);\nCHECK (ret, \"Failed to commit transaction\");\n// verify\nroute.flags     = 0;\nret = cross_dbGetRowByPK (hRtTbl, &amp;route, &amp;route, 0);\nEXPECT (route.flags, 5, \"    Update flags\");\nDUMP_ROUTE (\"    Get single route: \", route);\nprintf (\"  Rollback\\n\");\nret = cross_dbTransBegin (hDb, 0);\nCHECK (ret, \"Failed to begin transaction\");\nprintf (\"    Update single route 192.168.1.0/24 by Primary Key: set flags 0-&gt;6\\n\");\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   route.flags     = 6;\nret = cross_dbUpdRowByPK (hRtTbl, &amp;route, \"flags\", &amp;route, 0); CHECK (ret, \"Failed to update route 192.168.1.0/24 by Primary Key\");\nret = cross_dbTransRollback (hDb, 0);\nCHECK (ret, \"Failed to commit transaction\");\n// verify\nroute.flags     = 0;\nret = cross_dbGetRowByPK (hRtTbl, &amp;route, &amp;route, 0);\nEXPECT (route.flags, 5, \"    Rollback to orignal flags\");\nDUMP_ROUTE (\"    Get single route: \", route);\n</code></pre>"},{"location":"docs/crossdb/dml/#delete-rows","title":"Delete Rows","text":"<pre><code>printf (\"\\n============ Delete Rows ============\\n\");\nprintf (\"  Delete single route 192.168.1.0/24 by Primary Key\\n\");\nroute.prefix    = IP4ADDR(192,168,1,0);\nroute.mask      = 24;   ret = cross_dbDelRowByPK (hRtTbl, &amp;route, 0); CHECK (ret, \"Failed to delete route 192.168.1.0/24 by Primary Key\");\n// verify\ncount = cross_dbGetRowsCount (hRtTbl, NULL, NULL, 0);\nEXPECT (count, 2, \"    Total routes\");\n// Delete routes where nexthop=10.1.2.254\nroute.nexthop   = IP4ADDR(10,1,2,254);\ncount = cross_dbDeleteRows (hRtTbl, \"nexthop\", &amp;route, 0);\nEXPECT (count, 2, \"  Delete nexthop=10.1.2.254 rows\");\n// verify\ncount = cross_dbGetRowsCount (hRtTbl, NULL, NULL, 0);\nEXPECT (count, 0, \"    Total routes\");\n</code></pre>"},{"location":"docs/crossdb/dml/#close-db","title":"Close DB","text":"<pre><code>printf (\"\\n============ Close DB ============\\n\");\ncross_dbClose (hDb, 0);\n</code></pre>"},{"location":"docs/crossdb/indexes/","title":"Index","text":"<p>CrossDB Index is used to implement database Primary Key and accelerate query.</p>"},{"location":"docs/crossdb/indexes/#index-type","title":"Index Type","text":"<p>HASH Index</p> <ul> <li><code>HASH</code> index has highest O(1) performance. It's optimized a lot to achieve best performance.</li> <li><code>HASH</code> index can dynamically scale with table rows number to get high performance.</li> <li><code>HASH</code> index only supports exact match.</li> </ul> <p>RBTREE Index</p> <ul> <li>Use flag <code>CROSS_RBTREE</code></li> <li><code>RBTREE</code> index is almost the same with popular RDBMS BTree, which is core index engine of RDBMS.</li> <li><code>RBTREE</code> index can support exact match, range match and leftmost prefix match with multiple-column.</li> </ul>"},{"location":"docs/crossdb/indexes/#guide","title":"Guide","text":"<ul> <li>Default index is <code>HASH</code> type.</li> <li>If one query matches both HASH index and RBTREE index, then Hash index is selected in most cases.</li> <li>You can create <code>HASH</code> index for high performance query and <code>RBTREE</code> index for normal performance queries.</li> <li>Index is not free, it occupies space and all inexes may be updated during INSERT/UPDATE/DELET row.</li> <li>If index is unique, please set <code>CROSS_UNIQUE</code>.</li> <li>For unique index, either <code>insert</code> <code>replace</code> <code>update</code> will check row is unique.</li> <li>You can do any query on any fields combination without index. </li> <li>Create index only when the query calls frequency is high and requires performance.</li> </ul>"},{"location":"docs/crossdb/indexes/#example","title":"Example","text":"<pre><code>#define CHECK(ret,str)  \\\n    if (ret &lt; 0) {  printf (str\": %s\\n\", cross_errMsg(ret)); return -1; }\n// Create hash index\nret = cross_dbIdxCreate (hRtTbl, \"idx_nexthop\", \"nexthop\", 0);\nCHECK (ret, \"Failed to create index\");\n// Create rbtree index\nret = cross_dbIdxCreate (hRtTbl, \"idx_nexthop\", \"nexthop\", 0);\nCHECK (ret, \"Failed to create index\");\n// Create unique hash index\nret = cross_dbIdxCreate (hRtTbl, \"idx_route\", \"vrf,ipAddr\", CROSS_UNIQUE);\nCHECK (ret, \"Failed to create index\");\n// Create unique rbtree index\nret = cross_dbIdxCreate (hRtTbl, \"idx_route\", \"vrf,ipAddr\", CROSS_UNIQUE|CROSS_RBTREE);\nCHECK (ret, \"Failed to create index\");\n</code></pre>"},{"location":"docs/crossdb/schema/","title":"Schema","text":""},{"location":"docs/crossdb/schema/#schema-definition","title":"Schema Definition","text":"<p>Schem is used to define CrossDB table and it's defined based on C struct with some CrossDB macro.</p>"},{"location":"docs/crossdb/schema/#basic-types","title":"Basic Types","text":"<p>CrossDB Type and C Type Map</p> CrossDB Type Description C Type INT integer <code>char</code>, <code>short</code>, <code>int</code>, <code>long long</code>, <code>int8_t</code>, <code>int16_t</code>, <code>int32_t</code>, <code>int64_t</code> UINT unsinged integer <code>unsigned char</code>, <code>unsigned short</code>, <code>unsigned int</code>, <code>unsigned long long</code>, <code>uint8_t</code> <code>uint16_t</code>, <code>uint32_t</code>, <code>uint64_t</code> FLOAT floating-point <code>float</code>, <code>double</code> CHAR charater string <code>char []</code> BYTE byte array <code>unsiged char []</code>, <code>uint8_t []</code>, <code>struct</code> <p>CrossDB Format</p> CrossDB Type CrossDB Formt Description INT/UINT DFT default decimal FLOAT DFT default floating-point CHAR DFT default charater string BYTE DFT default hexadecimal string INT/UINT BOOL boolean UINT HEX hexadecimal INT/UINT TIMESTAMP/TS Timestamp: <code>time_t</code>, <code>uin32_t</code>, <code>uint64_t</code> BTYE MAC MAC addrss: <code>uint8_t [6]</code>, <code>struct ether_addr</code> UINT IPv4 Host endian IPv4 address: <code>uint32_t</code> BYTE IPv4 Network endian IPv4 address: <code>struct in_addr</code>, <code>uint32_t</code> BYTE IPv6 Network endian IPv4 address: <code>uint8_t [16]</code>, <code>struct in_addr6</code> <p>Example</p> <pre><code>typedef struct {\nchar            val_char;\nint64_t         val_int64;\nuint16_t        val_u16;\nuint8_t         val_u8;\nfloat           val_float;\ndouble          val_double;\nchar            val_str[16];\nuint8_t         val_byte[64];\nchar            val_bool;\nuint16_t        flags;\ntime_t          birth;\nunsigned char   mac[6];\nuint32_t        ipAddrHost;\nstruct in_addr  ipAddrNet;\nuint8_t         ip6Addr[16];\n} basic_types_t;\n</code></pre> <p>Set <code>CROSS_STRUCT_NAME</code> to the struct name <code>basic_types_t</code> for <code>CROSS_FIELD</code> to define the schema entry.  <code>CROSS_END</code> is used to mark the end of schema definition.</p> <pre><code>#undef  CROSS_STRUCT_NAME\n#define CROSS_STRUCT_NAME   basic_types_t\ncross_field_t   basic_types_schema[] = {\nCROSS_FIELD (val_char,      INT,    DFT,  0),\nCROSS_FIELD (val_int64,     INT,    DFT,  0),\nCROSS_FIELD (val_u16,       UINT,   DFT,  0),\nCROSS_FIELD (val_u8,        UINT,   DFT,  0),\nCROSS_FIELD (val_float,     FLOAT,  DFT,  0),\nCROSS_FIELD (val_double,    FLOAT,  DFT,  0),\nCROSS_FIELD (val_str,       CHAR,   DFT,  0),\nCROSS_FIELD (val_byte,      BYTE,   DFT,  0),\nCROSS_FIELD (val_bool,      UINT,   BOOL, 0),\nCROSS_FIELD (flags,         UINT,   HEX,  0),\nCROSS_FIELD (birth,         UINT,   TS,   0),\nCROSS_FIELD (mac,           BYTE,   MAC,  0),\nCROSS_FIELD (ipAddrHost,    UINT,   IPv4, 0),\nCROSS_FIELD (ipAddrNet,     BYTE,   IPv4, 0),\nCROSS_FIELD (ip6Addr,       BYTEE,  IPv6, 0),\nCROSS_END (basic_types_t)\n};\n</code></pre> <p>To keep struct and schema in header file, you can define them together like following way.</p> <p>Define macro <code>ROUTE_SCHEMA()</code> in header file <pre><code>// In header file\ntypedef struct {\nuint32_t            prefix;\nuint8_t             mask;\nuint32_t            nexthop;\nuint8_t             metric;\nchar                intf[16];\nuint32_t            birth;\nuint32_t            flags;\n} route_t;\n#dfine ROUTE_SCHEMA()   \\   \nCROSS_FIELD (prefix,    UINT,   IPv4, 0), \\\n    CROSS_FIELD (mask,      UINT,   DFT,  0), \\\n    CROSS_FIELD (nexthop,   UINT,   IPv4, 0), \\\n    CROSS_FIELD (metric,    UINT,   DFT,  0), \\\n    CROSS_FIELD (intf,      CHAR,   DFT,  0), \\\n    CROSS_FIELD (birth,     UINT,   TS,   0), \\\n    CROSS_FIELD (flags,     UINT,   HEX,  0), \\\n    CROSS_END (route_t)\n</code></pre></p> <p>Define schema in source file. <code>CROSS_END</code> can be define in <code>route_schema</code> also then you can reuse the macro <code>ROUTE_SCHEMA()</code> or combine them. <pre><code>    // In source file\n#undef  CROSS_STRUCT_NAME\n#define CROSS_STRUCT_NAME   route_t\ncross_field_t   route_schema[] = {\nROUTE_SCHEMA()\n}\n</code></pre></p>"},{"location":"docs/crossdb/table/","title":"Table","text":"<p>CrosDB Table is a collection of rows(record or tuple) and columns.</p> <ul> <li>Table schema is mapped from C Struct, so this is a kind of C Struct ORM(Object Relational Mapping).</li> <li>The C struct is expanded into each single fields for composite data type like array, nested struct etc.</li> <li>Each table can have only one Primary key.</li> <li>Each table can hve many secondray indexes.</li> </ul>"},{"location":"docs/crossdb/table/#primary-keypk","title":"Primary Key(PK)","text":"<ul> <li>Each table can have only one Primray Key, which is used to identify the row uniquely.</li> <li>Primay Key column list shouldn't change during the row lifecycle.</li> <li>Primary Key is implemented with unique <code>HASH</code> index for high performance. You can change to <code>RBTREE</code> as well.</li> </ul>"},{"location":"docs/crossdb/table/#guide","title":"Guide","text":"<ul> <li>If table exists and pFields is different with table schema, table will be upgraded automatically.</li> <li>If you want to know if table exists, you can use <code>CROSS_OPEN</code> to get handle first.</li> <li>Primary Key is <code>HASH</code> type by default to achieve highest performance.</li> <li>If you don't care about performance, you can set <code>CROSS_RBTREE</code> to create <code>RBTREE</code> type Primary Key.</li> <li>If you need both exact match and range match for Primary Key, you can create another <code>RBTREE</code> index with same column list.</li> </ul>"},{"location":"docs/crossdb/table/#example","title":"Example","text":"<pre><code>// Create table with PrimaryKey=\"prefix,mask\", HASH Type\nret = cross_dbTblCreate (hDb, &amp;hRtTbl, \"route\", route_schema, \"prefix,mask\", 0);\nCHECK (ret, \"Failed to create route table\");\n// Create table with PrimaryKey=\"prefix,mask\", RBTREE Type\nret = cross_dbTblCreate (hDb, &amp;hRtTbl, \"route\", route_schema, \"prefix,mask\", CROSS_RBTREE);\nCHECK (ret, \"Failed to create route table\");\n// Get table handle\nret = cross_dbTblCreate (hDb, &amp;hRtTbl, \"route\", NULL, NULL, CROSS_OPEN);\nCHECK (ret, \"Failed to get route table\");\n</code></pre>"},{"location":"products/CHANGELOG/","title":"Change Log","text":""},{"location":"products/CHANGELOG/#0.3.0","title":"0.3.0 (2023-06-13)","text":"<p>Features</p> <ul> <li>Support MacOS (X64 and ARM64)</li> <li>Change <code>CROSS_DB_XXX</code> to <code>CROSS_XXX</code></li> </ul> <p>Bug Fixes</p> <ul> <li><code>cross_dbTblCreate</code> flags <code>CROSS_DB_RBTREE</code> doesn't create Primary Key Index type correctly</li> </ul>"},{"location":"products/CHANGELOG/#0.2.0","title":"0.2.0 (2023-06-07)","text":"<p>Features</p> <ul> <li>Support Windows</li> <li>Support Linux ARM64</li> </ul> <p>Bug Fixes</p>"},{"location":"products/CHANGELOG/#0.1.0","title":"0.1.0 (2023-06-03)","text":"<ul> <li>Initial release</li> </ul> <p>Features</p> <p>Bug Fixes</p>"},{"location":"products/download/","title":"Download","text":"<p>We provide precompiled binaries for CrossDB components. Download the latest release of CrossDB for your platform.</p>"},{"location":"products/download/#crossdb-v030","title":"CrossDB v0.3.0","text":"<ul> <li>2023-06-13 Release notes</li> </ul> File Name OS Arch crossdb-0.3.0-linux-x64.tar.gz Linux X64 crossdb-0.3.0-linux-arm64.tar.gz Linux ARM64 crossdb-0.3.0-windows-x64.zip Windows X64 crossdb-0.3.0-macos.tar.gz Windows X64 and ARM64"},{"location":"products/download/#crossdb-v020","title":"CrossDB v0.2.0","text":"<ul> <li>2023-06-07 Release notes</li> </ul> File Name OS Arch crossdb-0.2.0-linux-x64.tar.gz Linux X64 crossdb-0.2.0-linux-arm64.tar.gz Linux ARM64 crossdb-0.2.0-windows-x64.zip Windows X64"},{"location":"products/download/#crossdb-v010","title":"CrossDB v0.1.0","text":"<ul> <li>2023-06-03 Release notes</li> </ul> File Name OS Arch crossdb-0.1.0-linux-x64.tar.gz Linux X64"},{"location":"products/price/","title":"Price and Buy","text":"Item Free Bronze Silver Gold Platinum Diamond DB/Process 2 16 32 64 128 128 Table/DB 16 128 256 512 1024 1024 Max Records/Table 200K 2M 10M 50M 200M 1B Max Row Size 1K 8K 16K 32K 64K 64K Max Columns/Table 256 1024 2048 3072 4096 4096 Max Index/Table 4 8 12 12 16 16 Max Trigger/Table 4 8 12 12 16 16 Max Foreign key/Table 4 8 12 12 16 16 CPU Core 1 2 4 8 16 512 Price $0 $100 $250 $500 $1000 $2000 Buy Free Buy now! Buy now! Buy now! Buy now! Buy now! Buy Free BuyNow BuyNow BuyNow BuyNow BuyNow"},{"location":"products/products/","title":"Products","text":""},{"location":"products/products/#crossdb-embedded-database-core","title":"CrossDB Embedded Database Core","text":"<p>CrossDB is a powerful High Performance Embedded Database which follows traditional RDBMS Model. It's developed to improve development efficiency for embedded programmers. </p> <p>CrossDB combines On-Disk In-Memory and On-RamDisk data storage in a single embedded database system, so developers can optimize applications for speed and persistence, giving you flexibility to prioritize between performance, cost, power, and space-conserving storage options.</p> <p> Get Started \ud83e\udded Read More \ud83d\udcdc </p>"}]}