{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"community/","title":"Community","text":""},{"location":"community/#discussion","title":"Discussion","text":""},{"location":"community/#issue","title":"Issue","text":""},{"location":"community/#requirement","title":"Requirement","text":""},{"location":"connector/","title":"Connector","text":"<p>TBD</p>"},{"location":"appendix/changelog/","title":"Changelog","text":""},{"location":"appendix/changelog/#tbd","title":"TBD","text":""},{"location":"appendix/faq/","title":"FAQ","text":""},{"location":"appendix/faq/#tbd","title":"TBD","text":""},{"location":"appendix/internals/","title":"Internals","text":""},{"location":"appendix/internals/#limits","title":"Limits","text":""},{"location":"appendix/internals/#db-files-structure","title":"DB Files Structure","text":""},{"location":"appendix/internals/#data-orgnization","title":"Data Orgnization","text":""},{"location":"appendix/internals/#hash-index-data-structure","title":"Hash Index Data Structure","text":""},{"location":"appendix/internals/#rbtree-index-data-structure","title":"RBTree Index Data Structure","text":""},{"location":"appendix/reference/","title":"Reference","text":""},{"location":"appendix/reference/#tbd","title":"TBD","text":""},{"location":"best-practice/","title":"Best Practice","text":""},{"location":"best-practice/#issu","title":"ISSU","text":""},{"location":"best-practice/#monolithic-app","title":"Monolithic App","text":""},{"location":"best-practice/#persistency-storage","title":"Persistency Storage","text":""},{"location":"best-practice/#event-loop","title":"Event Loop","text":""},{"location":"best-practice/#distribute-config","title":"Distribute Config","text":""},{"location":"best-practice/#distribute-dynamic-data","title":"Distribute Dynamic Data","text":""},{"location":"best-practice/#ha-replication","title":"HA Replication","text":""},{"location":"best-practice/#persistency-storage_1","title":"Persistency Storage","text":""},{"location":"best-practice/#collect-status","title":"Collect Status","text":""},{"location":"best-practice/#collect-statistics","title":"Collect Statistics","text":""},{"location":"best-practice/#collect-logs","title":"Collect Logs","text":""},{"location":"best-practice/#large-scale-system","title":"Large Scale System","text":""},{"location":"best-practice/#techlog","title":"TechLog","text":""},{"location":"best-practice/#unite-test","title":"Unite Test","text":""},{"location":"blog/","title":"Blog","text":""},{"location":"blog/#tbd","title":"TBD","text":""},{"location":"blog/2022/pp-oo-db/","title":"TBD","text":""},{"location":"c-orm/orm-api/","title":"ORM API","text":""},{"location":"c-orm/orm-api/#record-api","title":"Record API","text":""},{"location":"c-orm/orm-api/#cursor-api","title":"Cursor API","text":""},{"location":"c-orm/overview/","title":"Overview","text":""},{"location":"c-orm/overview/#tbd","title":"TBD","text":""},{"location":"c-orm/schema/","title":"Schema","text":""},{"location":"c-orm/schema/#basic","title":"Basic","text":""},{"location":"c-orm/schema/#enum","title":"Enum","text":""},{"location":"c-orm/schema/#bitfield","title":"Bitfield","text":""},{"location":"c-orm/schema/#array","title":"Array","text":""},{"location":"c-orm/schema/#nested-struct","title":"Nested Struct","text":""},{"location":"c-orm/schema/#union","title":"Union","text":""},{"location":"c-orm/schema/#schema-guide","title":"Schema Guide","text":""},{"location":"c-orm/schema/#issu","title":"ISSU","text":""},{"location":"fkey-trigger/cascade-trigger/","title":"Cascade Trigger","text":""},{"location":"fkey-trigger/cascade-trigger/#reliability","title":"Reliability","text":""},{"location":"fkey-trigger/cascade-trigger/#robust","title":"Robust","text":""},{"location":"fkey-trigger/cascade-trigger/#falut-tolerent","title":"Falut Tolerent","text":""},{"location":"fkey-trigger/data-driven/","title":"Data-Driven","text":""},{"location":"fkey-trigger/data-driven/#unit-test","title":"Unit Test","text":""},{"location":"fkey-trigger/foreign-key/","title":"Foreign Trigger","text":""},{"location":"fkey-trigger/foreign-key/#map-table","title":"Map Table","text":""},{"location":"fkey-trigger/foreign-key/#reference-with-given-value","title":"Reference with Given value","text":""},{"location":"fkey-trigger/foreign-key/#defer-delete","title":"Defer Delete","text":""},{"location":"fkey-trigger/foreign-key/#cascase","title":"Cascase","text":""},{"location":"fkey-trigger/foreign-key/#restrict","title":"Restrict","text":""},{"location":"fkey-trigger/foreign-key/#zero-value","title":"Zero value","text":""},{"location":"fkey-trigger/foreign-key/#no-action","title":"No Action","text":""},{"location":"fkey-trigger/overview/","title":"Overview","text":""},{"location":"fkey-trigger/overview/#tbd","title":"TBD","text":""},{"location":"fkey-trigger/trigger/","title":"Trigger","text":""},{"location":"fkey-trigger/trigger/#reliability","title":"Reliability","text":""},{"location":"fkey-trigger/trigger/#robust","title":"Robust","text":""},{"location":"fkey-trigger/trigger/#falut-tolerent","title":"Falut Tolerent","text":""},{"location":"pubsub/overview/","title":"Overview","text":""},{"location":"pubsub/overview/#client","title":"Client","text":""},{"location":"pubsub/overview/#python","title":"Python","text":""},{"location":"pubsub/overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pubsub/overview/#telnet","title":"telnet","text":""},{"location":"pubsub/overview/#cdb-cli","title":"cdb-cli","text":""},{"location":"pubsub/pubsub-model/","title":"PubSub MOdel","text":""},{"location":"pubsub/pubsub-model/#concept-and-model","title":"Concept and Model","text":""},{"location":"pubsub/pubsub-model/#architecture","title":"Architecture","text":""},{"location":"pubsub/pubsub-model/#incremental-sync","title":"Incremental Sync","text":""},{"location":"pubsub/pubsub-model/#basic-subscrition","title":"Basic subscrition","text":""},{"location":"pubsub/pubsub-model/#cascadinghierachy-subscrition","title":"Cascading/Hierachy subscrition","text":""},{"location":"pubsub/pubsub-model/#multiple-nodes-in-one-process","title":"Multiple nodes in one process","text":""},{"location":"pubsub/pubsub-model/#bi-directional-subscrition","title":"Bi-directional subscrition","text":""},{"location":"pubsub/pubsub-model/#multiple-source-subscrition","title":"Multiple-Source subscrition","text":""},{"location":"pubsub/replication/","title":"Replication","text":""},{"location":"pubsub/replication/#ha-replication","title":"HA Replication","text":""},{"location":"pubsub/replication/#group-replication","title":"Group Replication","text":""},{"location":"pubsub/reverse-pubsub/","title":"Reverse subscrition","text":""},{"location":"pubsub/reverse-pubsub/#centralized-db","title":"Centralized DB","text":""},{"location":"pubsub/reverse-pubsub/#large-scale-sysmtem-subscrition","title":"Large-Scale Sysmtem subscrition","text":""},{"location":"rdbms/overview/","title":"Overview","text":""},{"location":"rdbms/overview/#tbd","title":"TBD","text":""},{"location":"rdbms/rdbms-model/","title":"RDBMS","text":""},{"location":"rdbms/rdbms-model/#architecuture","title":"Architecuture","text":""},{"location":"rdbms/rdbms-model/#db","title":"DB","text":""},{"location":"rdbms/rdbms-model/#table","title":"Table","text":""},{"location":"rdbms/rdbms-model/#record","title":"Record","text":""},{"location":"rdbms/rdbms-model/#cursor","title":"Cursor","text":""},{"location":"rdbms/rdbms-model/#index","title":"Index","text":""},{"location":"rdbms/rdbms-model/#transaction","title":"Transaction","text":""},{"location":"rdbms/rdbms-model/#backup-and-restore","title":"Backup and Restore","text":""},{"location":"rdbms/rdbms-model/#db-upgrade","title":"DB Upgrade","text":""},{"location":"rdbms/sql/","title":"SQL","text":""},{"location":"rdbms/sql/#sql-api","title":"SQL API","text":""},{"location":"rdbms/sql/#db","title":"DB","text":""},{"location":"rdbms/sql/#table","title":"Table","text":""},{"location":"rdbms/sql/#index","title":"Index","text":""},{"location":"rdbms/sql/#insert","title":"Insert","text":""},{"location":"rdbms/sql/#update","title":"Update","text":""},{"location":"rdbms/sql/#select","title":"Select","text":""},{"location":"rdbms/sql/#delete","title":"Delete","text":""},{"location":"rdbms/sql/#truncate","title":"Truncate","text":""},{"location":"rdbms/sql/#join","title":"Join","text":""},{"location":"rpc/Serailization/","title":"Serailization","text":""},{"location":"rpc/Serailization/#schema","title":"Schema","text":""},{"location":"rpc/Serailization/#serailization_1","title":"Serailization","text":""},{"location":"rpc/Serailization/#binary","title":"Binary","text":""},{"location":"rpc/overview/","title":"Overview","text":""},{"location":"rpc/overview/#tbd","title":"TBD","text":""},{"location":"rpc/rpc-model/","title":"RPC","text":""},{"location":"rpc/rpc-model/#architecture","title":"Architecture","text":""},{"location":"rpc/rpc-model/#api","title":"API","text":""},{"location":"rpc/rpc-model/#troulbeshooting","title":"Troulbeshooting","text":""},{"location":"rpc/rpc-model/#rpc-trace","title":"RPC Trace","text":""},{"location":"server/event-loop/","title":"Event loop","text":""},{"location":"server/event-loop/#porting","title":"Porting","text":""},{"location":"server/overview/","title":"Server","text":""},{"location":"server/overview/#telnet-server","title":"Telnet Server","text":""},{"location":"server/overview/#cdb-cli-server","title":"cdb-cli Server","text":""},{"location":"server/overview/#event-loop","title":"Event-loop","text":""},{"location":"server/overview/#porting","title":"Porting","text":""},{"location":"server/overview/#python-connectr","title":"Python Connectr","text":""},{"location":"server/overview/#web-server","title":"Web Server","text":""},{"location":"server/overview/#rest-server","title":"REST Server","text":""},{"location":"server/scheduler/","title":"Scheduler","text":""},{"location":"server/scheduler/#timer","title":"Timer","text":""},{"location":"server/scheduler/#fd","title":"FD","text":""},{"location":"server/scheduler/#job","title":"Job","text":""},{"location":"server/scheduler/#rpc","title":"RPC","text":""},{"location":"server/scheduler/#web","title":"Web","text":""},{"location":"server/scheduler/#pubsub","title":"PUBSUB","text":""},{"location":"server/scheduler/#troubleshooting","title":"Troubleshooting","text":""},{"location":"troubleshooting/db-log/","title":"DB Log","text":""},{"location":"troubleshooting/db-log/#db-change-log","title":"DB Change Log","text":""},{"location":"troubleshooting/db-log/#db-user-log","title":"DB User Log","text":""},{"location":"troubleshooting/overview/","title":"Troubleshooting","text":""},{"location":"troubleshooting/overview/#cdb-staticstics","title":"CDB staticstics","text":""},{"location":"troubleshooting/overview/#cursor-leak-detection","title":"Cursor leak detection","text":""},{"location":"troubleshooting/overview/#relay","title":"Relay","text":""},{"location":"troubleshooting/overview/#common-issues","title":"Common Issues","text":""},{"location":"troubleshooting/shell/","title":"CLI","text":""},{"location":"troubleshooting/shell/#shell-api","title":"Shell API","text":""},{"location":"troubleshooting/shell/#cli-tool","title":"CLI tool","text":""},{"location":"troubleshooting/shell/#remote-debug","title":"Remote Debug","text":""},{"location":"troubleshooting/shell/#db-debug","title":"DB Debug","text":""},{"location":"troubleshooting/shell/#table-debug","title":"Table Debug","text":""},{"location":"troubleshooting/shell/#index-debug","title":"Index Debug","text":""},{"location":"troubleshooting/shell/#fk-and-trigger-debug","title":"FK and Trigger Debug","text":""},{"location":"troubleshooting/shell/#counter","title":"Counter","text":""},{"location":"troubleshooting/shell/#performance","title":"Performance","text":""},{"location":"troubleshooting/web-gui/","title":"Web GUI","text":""},{"location":"troubleshooting/web-gui/#gui-usage","title":"GUI Usage","text":""},{"location":"troubleshooting/web-gui/#nat-access","title":"NAT Access","text":""},{"location":"tutorial/getting-started/","title":"Getting Started","text":"<pre><code>int main (int argc, char *argv[])\n{\ncdb_error ret;\npthread_t       pid;\nif (argc &lt; 2) {\nprintf (\"Add TCP port to /etc/services\\n\");\nprintf (\"Start publiser:   %s node host\\n\", argv[0]);\nprintf (\"Start subscriber: %s node host pubnode pubhost\\n\", argv[0]);\nprintf (\"Insert 1000 record into node's mac talbe: %s node @m1000\\n\", argv[0]);\nprintf (\"Insert 1000 record into node's route talbe: %s node @r1000\\n\", argv[0]);\nprintf (\"Insert 1000 record into node's arp talbe: %s node @a1000\\n\", argv[0]);\nreturn -1;\n}\nif (argc &gt; 1) strcpy (g_node, argv[1]);\nif (argc &gt; 2) strcpy (g_host, argv[2]);\ncdb_signal_register (SIGSEGV);\ndl_init_daemon_context();\ndl_cdb_init ();\n// Create DB and Tables fisrt\nfib_db_init (g_node);\nuint32_t    ts_beg = time(NULL);\nsrand (time(NULL));\nchar    *l3if[] = {\"v100\", \"1.x1\", \"lo1\", \"v200\", \"1.x2\", \"lo2\", \"v300\", \"1.x3\"};\nif ((3 == argc) &amp;&amp; ('@' == argv[2][0]) &amp;&amp; ('m' == argv[2][1])) {\nmac_t       mac = {};\nint         count = atoi(&amp;argv[2][2]), fail = 0;\nchar        buf[1024];\ncdb_error   ret;\nuint64_t ts = cdb_timestamp_us ();\nfor (int i = 0; i &lt; count; i++) {\n#if 0\n            sprintf (buf, \"replace into mact set mac=00:00:00:%02x:%02x:%02x vlan=%d port=%d bStatic=%c\", rand()%256, rand()%256, rand()%256, rand () % 4094 + 1, rand () % 128 + 1, rand ()%2?'T':'F');\n            ret = cdb_sql_execute2 (&amp;g_hDb, CDB_DUMP_FLAG_IGNORE_FLDERR|CDB_DUMP_FLAG_QUITE|CDB_DUMP_FLAG_NO_PRIVATE, NULL, NULL, buf);\n    #else\nmac.mac[3]      = rand ();\nmac.mac[4]      = rand ();\nmac.mac[5]      = rand ();\nmac.vlan        = rand () % 4094 + 1;\nmac.cvlan       = rand () % 4094 + 1;\nmac.port        = rand () % 128 + 1;\nmac.vsi         = rand () % 0xff + 1;\nmac.logif       = ((rand () % 0xf)&lt;&lt;24) + (rand ()&amp;0xffff);\nmac.timestamp   = ts_beg + rand ()%100;\nmac.bStatic     = rand () % 2;\n#if 1\n//cdb_schema_print (cdb_table_get_schema(hMacTbl,0), NULL, 0, &amp;mac, CDB_DUMP_RECORD);\n//printf (\"\\n\");\nint len = cdb_record_dump2 (hMacTbl, buf, sizeof(buf), CDB_DUMP_REPLACE, NULL, &amp;mac, NULL, NULL, 0, NULL, CDB_DUMP_FLAG_SQL | CDB_DUMP_FLAG_NO_ZERO | CDB_DUMP_FLAG_NO_PRIVATE | CDB_DUMP_FLAG_BINARY);         #if 0\n            mac_t       key = {.vlan = 3333, .mac={0,0,0,0x11,0xd2,0xc3}};\n            mac_t       mac2 = {.port = 111};\n            //mac.vlan = 2827;\n            //int len = cdb_record_dump2 (hMacTbl, buf, sizeof(buf), CDB_DUMP_UPDATE, \"port\", &amp;mac2, NULL, &amp;key, 0, NULL, CDB_DUMP_FLAG_SQL | CDB_DUMP_FLAG_NO_ZERO | CDB_DUMP_FLAG_NO_PRIVATE | CDB_DUMP_FLAG_BINARY);\n            int len = cdb_record_dump2 (hMacTbl, buf, sizeof(buf), CDB_DUMP_DELETE, NULL, &amp;key, NULL, NULL, 0, NULL, CDB_DUMP_FLAG_SQL | CDB_DUMP_FLAG_NO_ZERO | CDB_DUMP_FLAG_NO_PRIVATE | CDB_DUMP_FLAG_BINARY);\n            #endif\n(void)len;\nret = cdb_binrec_exec (g_hDb, buf, 0);\ncontinue;\n//cdb_schema_print (cdb_table_get_schema(hMacTbl,0), NULL, 0, &amp;mac, CDB_DUMP_RECORD);\n//cdb_schema_dump2 (cdb_table_get_schema(hMacTbl,0), buf, sizeof(buf), CDB_DUMP_RECORD, &amp;mac, CDB_DUMP_FLAG_NO_ZERO|CDB_DUMP_FLAG_BINARY);      \n//          cdb_schema_dump2 (cdb_table_get_schema(hMacTbl,0), buf, sizeof(buf), CDB_DUMP_RECORD, &amp;mac, CDB_DUMP_FLAG_NO_ZERO);     \n//memset (&amp;mac, 0xcc, sizeof(mac));\n//          cdb_schema_scanf2 (cdb_table_get_schema(hMacTbl,0), buf, CDB_DUMP_RECORD, &amp;mac, sizeof(mac), CDB_DUMP_FLAG_IGNORE_FLDERR|CDB_DUMP_FLAG_MEMSET);\n//cdb_schema_print (cdb_table_get_schema(hMacTbl,0), NULL, 0, &amp;mac, CDB_DUMP_RECORD);\n#endif\n#endif\nret = cdb_record_insert (hMacTbl, &amp;mac, NULL, NULL, 0);\nif (ret != CDB_ERROR_OK) {\nfail++;\n}\n}\nts = cdb_timestamp_us () - ts;\nif (0 == ts) {\nts = 1;\n}\nprintf (\"insert %d mac, fail %d, use time %ds%dms%dus, TPS %d\\n\", count, fail, (int)(ts/1000000), (int)((ts/1000)%1000), (int)(ts%1000), (int)((int64_t)count*1000000/ts));\ncdb_shell_loop (NULL, NULL, NULL);\n(void)buf;\nreturn 0;\n}\nif ((3 == argc) &amp;&amp; ('@' == argv[2][0]) &amp;&amp; ('r' == argv[2][1])) {\nroute_t     route = {};\nint         count = atoi(&amp;argv[2][2]), fail = 0;\ncdb_error   ret;\nfor (int i = 0; i &lt; count; i++) {\nroute.vrf       = rand();\nroute.ip        = rand() + 1;\nroute.mask      = (rand()%4)*4+16;\nroute.gw        = rand() + 1;\nroute.metric    = rand();\nroute.type      = rand()%4;\nroute.port      = rand();\nstrcpy (route.l3if, l3if[rand()%8]);\nret = cdb_record_insert (hRouteTbl, &amp;route, NULL, NULL, 0);\nif (ret != CDB_ERROR_OK) {\nfail++;\n}\n}\nprintf (\"insert %d route, fail %d\\n\", count, fail);\ncdb_shell_loop (NULL, NULL, NULL);\nreturn 0;\n}\nif ((3 == argc) &amp;&amp; ('@' == argv[2][0]) &amp;&amp; ('a' == argv[2][1])) {\narp_t       arp = {};\nint         count = atoi(&amp;argv[2][2]), fail = 0;\ncdb_error   ret;\nfor (int i = 0; i &lt; count; i++) {\narp.vrf         = rand();\narp.ip          = rand() + 1;\narp.mac[3]      = rand ();\narp.mac[4]      = rand ();\narp.mac[5]      = rand ();\narp.port        = rand () % 128 + 1;\nstrcpy (arp.l3if,   l3if[rand()%8]);\narp.bStatic     = rand () % 2;\narp.flags       = rand ();\narp.hwtype      = rand ();\nret = cdb_record_insert (hArpTbl, &amp;arp, NULL, NULL, 0);\nif (ret != CDB_ERROR_OK) {\nfail++;\n}\n}\nprintf (\"insert %d route, fail %d\\n\", count, fail);\ncdb_shell_loop (NULL, NULL, NULL);\nreturn 0;\n}\nprintf (\"mate card: %s\\n\", dl_card_get_mate_card_str ());\nif (argc &lt;= 3) {\n// Publisher only, run in default main thread eventloop\ncdb_pubsub_init (NULL, NULL, NULL, NULL, NULL);\ns_my_hEvtLoop = cdb_eventloop_get (NULL, NULL);\n#if 0\n        void *pTimer = cdb_eventloop_timer_create (s_my_hEvtLoop);\n        if (NULL == pTimer) {\n            printf (\"Failed to create timer\\n\");\n            return -1;\n        }\n        cdb_eventloop_timer_start (s_my_hEvtLoop, pTimer, 5, 0, pub_timer_cb, pTimer);\n#endif\n#if 0\n        cdb_pub_h hPub = cdb_publication_get (\"Hal\", NULL, \"Hal\", NULL); \n        if (NULL != hPub) {\n            cdb_pubsub_sync (hPub, NULL, CDB_SYNC_CHECK, my_pub_cb, hPub, 0); \n        }\n#endif\n} else {\n// Publisher &amp; Subscriber\ncdb_pub_h   hPub;\nconst char *pubnode = argv[3];\nconst char *pubhost = argc&gt;4?argv[4]:NULL; // NULL means local\nconst char *pubdb = pubnode;\nconst char *subdb = g_node;\nconst char *pubname = g_node;\n/* Init pubsub, run publisher and subscriber in default main event loop (NULL) or new oshal event loop\n           if cdb_pubsub_init is called in thread which has no main event loop, must give an eventloop name\n         */\nconst char *dftevtloop = \"oshal\"; // NULL\ncdb_pubsub_init (NULL, NULL, NULL, dftevtloop, dftevtloop);\nif (argc &lt;= 6) {\n// Get default event loop\ns_my_hEvtLoop = cdb_eventloop_get (dftevtloop, NULL);\nif (NULL == s_my_hEvtLoop) {\nprintf (\"Failed to get eventloop\\n\");\nreturn -1;\n}\n// Create Publication\nret = cdb_pubsub_create (&amp;hPub, pubnode, pubhost, pubname, NULL, pubdb, subdb, NULL, 0);\nif (CDB_ERROR_OK != ret) {\nprintf (\"Failed to create publication %s\\n\", cdb_errmsg(ret));\nreturn -1;\n}\n// Create Subscriptions\ncdb_bool bFilter = 0;\nret = cdb_pubsub_subscribe (hPub, \"mact\", \"mact\", \"mact\", !bFilter?NULL:\"vlan=100\", NULL, 0);\nif (CDB_ERROR_OK != ret) {\nprintf (\"Failed to subscribe %s %s\\n\", \"mact\", cdb_errmsg(ret));\n}\nret = cdb_pubsub_subscribe (hPub, \"arp\", \"arp\", \"arp\",  NULL, NULL, 0);\nif (CDB_ERROR_OK != ret) {\nprintf (\"Failed to subscribe %s %s\\n\", \"arp\", cdb_errmsg(ret));\n}\nret = cdb_pubsub_subscribe (hPub, \"route\", \"route\", \"route\",  !bFilter?NULL:\"hostOnly!='T'\", NULL, 0);\nif (CDB_ERROR_OK != ret) {\nprintf (\"Failed to subscribe %s %s\\n\", \"mact\", cdb_errmsg(ret));\n}\nret = cdb_pubsub_subscribe (hPub, \"salready\", \"salready\", \"salready\",  NULL, NULL, 0);\nif (CDB_ERROR_OK != ret) {\nprintf (\"Failed to subscribe %s %s\\n\", \"salready\", cdb_errmsg(ret));\n}\ns_my_hPub = hPub;\n//cdb_eventloop_addfd (s_my_hEvtLoop, fd, CPE_READABLE, my_fd_cb, NULL);\n#if 0\n        void *pTimer = cdb_eventloop_timer_create (s_my_hEvtLoop);\n        if (NULL == pTimer) {\n            printf (\"Failed to create timer\\n\");\n            return -1;\n        }\n        cdb_eventloop_timer_start (s_my_hEvtLoop, pTimer, 20, 0, sub_timer_cb, pTimer);\n#endif\nprintf (\"Begin sync ...\\n\");\nif ((argc&gt;5) &amp;&amp; ('A' == argv[5][0])) {\nprintf (\"I'm Active, don't sync data from standby ...\\n\");\nret = cdb_pubsub_sync (hPub, NULL, CDB_SYNC_STOP, my_sub_cb, hPub, 0);\n} else {\nif (argc&gt;5) {\nprintf (\"I'm Standby, sync with active ...\\n\");\n}\ncdb_pubsub_sync (hPub, NULL, CDB_SYNC_FULL, my_sub_cb, hPub, 0);\n#if 0\n            cdb_trigger_create2 (hMacTbl, \"trig_ins\", CDB_TRIG_AFT_INSERT, mac_trigger, NULL, 0);\n            cdb_trigger_create2 (hMacTbl, \"trig_del\", CDB_TRIG_AFT_DELETE, mac_trigger, NULL, 0);\n            cdb_trigger_create2 (hMacTbl, \"trig_upd\", CDB_TRIG_AFT_UPDATE, mac_trigger, NULL, 0);\n#endif\n}\n}\n}\n// Create shell thread\npthread_create (&amp;pid, NULL, shell_thread, NULL);\npthread_detach (pid);\n// Main Event Loop\nwhile (!s_bailout) {\ndl_poll_fds (-1);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"tutorial/getting-started/#tbd","title":"TBD","text":""},{"location":"tutorial/introduction/","title":"Introduction","text":"<p>CrossDB(CDB) is a powerful high-performance distrubuted embedded SQL RDBMS database. It's developed to  improve development efficiency for embedded programmers. </p> <ul> <li>You can use CDB RDBMS to Manage Program Data efficiently.</li> <li>You can use CDB transaction to do persistency storage on Disk/Flash with ACID feature.</li> <li>YOu can use CDB to support Process Restartability, In-Service Software Upgrade(ISSU) easily.</li> <li>You can use CDB RDBMS to refactor your code conveniently.</li> <li>You can use CDB Index to optimize performance without changing your code.</li> <li>You can use CDB Trigger to implement Data-Driven programming paradigm.</li> <li>You can use CDB PUBSUB to subscribe DB from other process's DB either on same host or remote host.</li> <li>You can use CDB to implement Centralize-DB programming paradigm.</li> <li>You can use CDB eventloop to implement event-driven programming paradigm.</li> <li>You can use CDB RPC to build distributed service.</li> <li>You can use CDB CLI tool to debug running program's data in off-line way.</li> <li>You can use CDB SQL to view/create/update/delete/filter program data.</li> <li>You can use CDB Browser to view program data.</li> <li>You can use CDB to do DB backup restore it.</li> <li>You can use CDB DB Change Log to view DB change history with filter, backtrace, rate-limit, expiring, etc.</li> <li>You can use Python connector to write unit test with SQL to test program.</li> <li>You can copy the DB folders from device and open on PC/Server with cdb-cli or Python directly.</li> <li>Use CDB DB-Driven Mode to Build Program Logic (Table Trigger, FK, auto delete, Cascade Trigger)</li> <li>Use CDB Python Connector to do DB-Driven Unit Test</li> <li>Use CDB Pub/Sub to Build Distributed System (Eventloop/Timer/WorkQueue, vs IPC, OOP [priv data])</li> <li>Use CDB Pub/Sub to Build Centralized DB-Driven System (3rd lang, DM no checkpoint)</li> <li>CDB Serialization and RPC</li> <li>CDB SQL Connectors (RESP3, Python)</li> <li>CDB SQL Drivers (C, Python)</li> </ul>"},{"location":"tutorial/introduction/#architecture","title":"Architecture","text":""},{"location":"tutorial/introduction/#feature-list","title":"Feature List","text":"<p>TDB</p>"},{"location":"tutorial/introduction/#support-os","title":"Support OS","text":"<ul> <li>Linux</li> <li>Windows</li> </ul>"},{"location":"tutorial/introduction/#support-platform","title":"Support Platform","text":"<p>Following platform are tested</p> <ul> <li>x86</li> <li>PowerPC</li> <li>ARM</li> </ul>"},{"location":"tutorial/introduction/#porting","title":"Porting","text":"<p>Log</p> <p>Heart beat</p>"},{"location":"tutorial/introduction/#compiling","title":"Compiling","text":""},{"location":"tutorial/introduction/#linux","title":"Linux","text":"<p>Build library</p> <p>Build example</p>"},{"location":"tutorial/introduction/#windows","title":"Windows","text":"<p>You can build with MinGW or MSYS2 or Cygwin</p> <p>Build library MinGW MSYS2 Cygwin</p> <p>Build example</p>"}]}